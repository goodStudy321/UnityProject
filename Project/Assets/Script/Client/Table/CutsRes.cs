// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: cuts_res.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class CutsRes : Table.Binary, Table.IKey
{
	#region groupRes
	public class groupRes : Table.Binary
	{
		Table.String m_group_name;
		Table.String m_actor_name;
		
		public string groupName
		{
			get { return m_group_name; }
		}
		
		public string actorName
		{
			get { return m_actor_name; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_group_name).Load(ref m_actor_name);
			return loader.Size;
		}
	}
	#endregion
	
	#region changeList
	public class changeList : Table.Binary
	{
		List<groupRes> m_list;
		
		public List<groupRes> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region clips
	public class clips : Table.Binary
	{
		List<Table.String> m_list;
		
		public List<Table.String> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region clipList
	public class clipList : Table.Binary
	{
		List<clips> m_list;
		
		public List<clips> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	UInt32       m_index;
	Table.String m_cuts_name;
	Byte         m_repl_type;
	Byte         m_con_type1;
	UInt16       m_con_val1;
	changeList   m_res_list;
	clipList     m_track_clips;
	Table.String m_postfix;
	
	public const UInt32 Version = 1249044584;
	
	public UInt64 Key()
	{
		return m_index;
	}
	
	public UInt32 index
	{
		get { return m_index; }
	}
	
	public string cutsName
	{
		get { return m_cuts_name; }
	}
	
	public Byte replType
	{
		get { return m_repl_type; }
	}
	
	public Byte conType1
	{
		get { return m_con_type1; }
	}
	
	public UInt16 conVal1
	{
		get { return m_con_val1; }
	}
	
	public changeList resList
	{
		get { return m_res_list; }
	}
	
	public clipList trackClips
	{
		get { return m_track_clips; }
	}
	
	public string postfix
	{
		get { return m_postfix; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_index).Load(ref m_cuts_name).Load(ref m_repl_type).Load(ref m_con_type1).Load(ref m_con_val1).Load(ref m_res_list).Load(ref m_track_clips).Load(ref m_postfix);
		return loader.Size;
	}
}

// source: C 动画片段资源配置表.xls, sheet: Sheet1
public sealed class CutsResManager : Table.Manager<CutsRes>
{
	private static readonly CutsResManager ms_instance = new CutsResManager();
	
	private CutsResManager()
	{
	}
	
	public static CutsResManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "cuts_res.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, CutsRes.Version);
	}
	
	public CutsRes Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewCutsRes()
	{
		return new CutsRes();
	}
	public static object NewCutsResgroupRes()
	{
		return new CutsRes.groupRes();
	}
	
	public static object NewCutsReschangeList()
	{
		return new CutsRes.changeList();
	}
	
	public static object NewCutsResclips()
	{
		return new CutsRes.clips();
	}
	
	public static object NewCutsResclipList()
	{
		return new CutsRes.clipList();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(CutsRes), NewCutsRes);
		Table.NewHelper.Register(typeof(CutsRes.groupRes), NewCutsResgroupRes);
		Table.NewHelper.Register(typeof(CutsRes.changeList), NewCutsReschangeList);
		Table.NewHelper.Register(typeof(CutsRes.clips), NewCutsResclips);
		Table.NewHelper.Register(typeof(CutsRes.clipList), NewCutsResclipList);
	}
	#endregion
}

