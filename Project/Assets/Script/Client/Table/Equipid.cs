// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: equipid.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class EquipId : Table.Binary, Table.IKey
{
	UInt32 m_dropid;
	UInt32 m_id0;
	UInt32 m_id1;
	UInt32 m_id2;
	UInt32 m_id3;
	
	public const UInt32 Version = 4140575921;
	
	public UInt64 Key()
	{
		return m_dropid;
	}
	
	public UInt32 dropid
	{
		get { return m_dropid; }
	}
	
	public UInt32 id0
	{
		get { return m_id0; }
	}
	
	public UInt32 id1
	{
		get { return m_id1; }
	}
	
	public UInt32 id2
	{
		get { return m_id2; }
	}
	
	public UInt32 id3
	{
		get { return m_id3; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_dropid).Load(ref m_id0).Load(ref m_id1).Load(ref m_id2).Load(ref m_id3);
		return loader.Size;
	}
}

// source: Z 装备id对应表.xls, sheet: Sheet1
public sealed class EquipIdManager : Table.Manager<EquipId>
{
	private static readonly EquipIdManager ms_instance = new EquipIdManager();
	
	private EquipIdManager()
	{
	}
	
	public static EquipIdManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "equipid.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, EquipId.Version);
	}
	
	public EquipId Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewEquipId()
	{
		return new EquipId();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(EquipId), NewEquipId);
	}
	#endregion
}

