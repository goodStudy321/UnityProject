// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: mount_info.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class MountInfo : Table.Binary, Table.IKey
{
	UInt32       m_baseid;
	Table.String m_name;
	UInt16       m_model_id;
	UInt16       m_model_ui_id;
	Byte         m_mount_point;
	UInt32       m_open_skill;
	Table.String m_role_idle_id;
	Table.String m_role_move_id;
	
	public const UInt32 Version = 2083995189;
	
	public UInt64 Key()
	{
		return m_baseid;
	}
	
	public UInt32 baseid
	{
		get { return m_baseid; }
	}
	
	public string name
	{
		get { return m_name; }
	}
	
	public UInt16 modelId
	{
		get { return m_model_id; }
	}
	
	public UInt16 modelUiId
	{
		get { return m_model_ui_id; }
	}
	
	public Byte mountPoint
	{
		get { return m_mount_point; }
	}
	
	public UInt32 openSkill
	{
		get { return m_open_skill; }
	}
	
	public string roleIdleId
	{
		get { return m_role_idle_id; }
	}
	
	public string roleMoveId
	{
		get { return m_role_move_id; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_baseid).Load(ref m_name).Load(ref m_model_id).Load(ref m_model_ui_id).Load(ref m_mount_point).Load(ref m_open_skill).Load(ref m_role_idle_id).Load(ref m_role_move_id);
		return loader.Size;
	}
}

// source: Z 坐骑基础表.xls, sheet: Sheet1
public sealed class MountInfoManager : Table.Manager<MountInfo>
{
	private static readonly MountInfoManager ms_instance = new MountInfoManager();
	
	private MountInfoManager()
	{
	}
	
	public static MountInfoManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "mount_info.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, MountInfo.Version);
	}
	
	public MountInfo Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewMountInfo()
	{
		return new MountInfo();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(MountInfo), NewMountInfo);
	}
	#endregion
}

