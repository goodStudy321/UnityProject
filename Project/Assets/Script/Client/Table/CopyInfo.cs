// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: CopyInfo.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class CopyInfo : Table.Binary, Table.IKey
{
	#region item
	public class item : Table.Binary
	{
		Int32 m_id;
		Int32 m_num;
		
		public Int32 id
		{
			get { return m_id; }
		}
		
		public Int32 num
		{
			get { return m_num; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_id).Load(ref m_num);
			return loader.Size;
		}
	}
	#endregion
	
	#region item_list
	public class item_list : Table.Binary
	{
		List<item> m_list;
		
		public List<item> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	UInt32       m_base_id;
	Table.String m_name;
	Byte         m_copy_type;
	Table.String m_three_name;
	Table.String m_des;
	Table.String m_icon;
	Byte         m_complete_type;
	Byte         m_enter_num;
	Byte         m_end_downcount;
	Byte         m_is_mount;
	Byte         m_is_pk;
	Byte         m_enter_level;
	Byte         m_player_num_limit;
	Table.String m_value;
	item_list    m_show_Items;
	
	public const UInt32 Version = 1461901223;
	
	public UInt64 Key()
	{
		return m_base_id;
	}
	
	public UInt32 baseId
	{
		get { return m_base_id; }
	}
	
	public string name
	{
		get { return m_name; }
	}
	
	public Byte copyType
	{
		get { return m_copy_type; }
	}
	
	public string threeName
	{
		get { return m_three_name; }
	}
	
	public string des
	{
		get { return m_des; }
	}
	
	public string icon
	{
		get { return m_icon; }
	}
	
	public Byte completeType
	{
		get { return m_complete_type; }
	}
	
	public Byte enterNum
	{
		get { return m_enter_num; }
	}
	
	public Byte endDowncount
	{
		get { return m_end_downcount; }
	}
	
	public Byte isMount
	{
		get { return m_is_mount; }
	}
	
	public Byte isPk
	{
		get { return m_is_pk; }
	}
	
	public Byte enterLevel
	{
		get { return m_enter_level; }
	}
	
	public Byte playerNumLimit
	{
		get { return m_player_num_limit; }
	}
	
	public string value
	{
		get { return m_value; }
	}
	
	public item_list showItems
	{
		get { return m_show_Items; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_base_id).Load(ref m_name).Load(ref m_copy_type).Load(ref m_three_name).Load(ref m_des).Load(ref m_icon).Load(ref m_complete_type).Load(ref m_enter_num).Load(ref m_end_downcount).Load(ref m_is_mount).Load(ref m_is_pk).Load(ref m_enter_level).Load(ref m_player_num_limit).Load(ref m_value).Load(ref m_show_Items);
		return loader.Size;
	}
}

// source: F 副本.xls, sheet: Sheet1
public sealed class CopyInfoManager : Table.Manager<CopyInfo>
{
	private static readonly CopyInfoManager ms_instance = new CopyInfoManager();
	
	private CopyInfoManager()
	{
	}
	
	public static CopyInfoManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "copyinfo.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, CopyInfo.Version);
	}
	
	public CopyInfo Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewCopyInfo()
	{
		return new CopyInfo();
	}
	public static object NewCopyInfoitem()
	{
		return new CopyInfo.item();
	}
	
	public static object NewCopyInfoitem_list()
	{
		return new CopyInfo.item_list();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(CopyInfo), NewCopyInfo);
		Table.NewHelper.Register(typeof(CopyInfo.item), NewCopyInfoitem);
		Table.NewHelper.Register(typeof(CopyInfo.item_list), NewCopyInfoitem_list);
	}
	#endregion
}

