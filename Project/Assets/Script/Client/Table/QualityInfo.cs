// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: quality_info.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class QualityInfo : Table.Binary, Table.IKey
{
	#region matList
	public class matList : Table.Binary
	{
		List<Table.String> m_list;
		
		public List<Table.String> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	UInt32       m_id;
	Table.String m_name;
	matList      m_h_mat_info;
	matList      m_l_mat_info;
	
	public const UInt32 Version = 681279867;
	
	public UInt64 Key()
	{
		return m_id;
	}
	
	public UInt32 id
	{
		get { return m_id; }
	}
	
	public string name
	{
		get { return m_name; }
	}
	
	public matList hMatInfo
	{
		get { return m_h_mat_info; }
	}
	
	public matList lMatInfo
	{
		get { return m_l_mat_info; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_id).Load(ref m_name).Load(ref m_h_mat_info).Load(ref m_l_mat_info);
		return loader.Size;
	}
}

// source: Z 质量资源配置.xls, sheet: Sheet1
public sealed class QualityInfoManager : Table.Manager<QualityInfo>
{
	private static readonly QualityInfoManager ms_instance = new QualityInfoManager();
	
	private QualityInfoManager()
	{
	}
	
	public static QualityInfoManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "quality_info.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, QualityInfo.Version);
	}
	
	public QualityInfo Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewQualityInfo()
	{
		return new QualityInfo();
	}
	public static object NewQualityInfomatList()
	{
		return new QualityInfo.matList();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(QualityInfo), NewQualityInfo);
		Table.NewHelper.Register(typeof(QualityInfo.matList), NewQualityInfomatList);
	}
	#endregion
}

