// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: summon.prot

#ifndef _TDL_SUMMON_H_
#define _TDL_SUMMON_H_

#include "table_utility.h"

class Summon;
class SummonManager;


// ===================================================================
#pragma pack( 1 )
class Summon
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 4199419623;
	
	uint32 Key() const;
	
	uint32 baseid() const;
	uint16 model_id() const;
	uint32 carry_skill() const;
	
private:
	uint32 m_baseid;
	uint16 m_model_id;
	uint32 m_carry_skill;
};
#pragma pack()

// -------------------------------------------------------------------
// source: Z 召唤体配置.xls, sheet: Sheet1
class SummonManager : public Table::Manager, public Singleton< SummonManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const Summon& Get( int index ) const;
	const Summon* Find( const uint32 key ) const;
	
private:
	friend class Singleton< SummonManager >;
	typedef Table::RepeatField< SummonManager, Summon >	SummonArray;
	
	SummonManager();
	~SummonManager();
	
private:
	const SummonArray *m_array;
};


// ===================================================================
// inline methords of Summon
inline uint32 Summon::Key() const
{
	return Combiner< uint32 >::Combine( m_baseid );
}

inline uint32 Summon::baseid() const
{
	return m_baseid;
}

inline uint16 Summon::model_id() const
{
	return m_model_id;
}

inline uint32 Summon::carry_skill() const
{
	return m_carry_skill;
}


// inline methords of SummonManager
inline SummonManager::SummonManager()
	: m_array( NULL )
{
}

inline SummonManager::~SummonManager()
{
}

inline int SummonManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* SummonManager::Source() const
{
	return "summon.tbl";
}

inline bool SummonManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const SummonArray *)data;
	return true;
}

inline bool SummonManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const SummonArray *)data;
	return true;
}

inline const Summon& SummonManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const Summon* SummonManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< Summon >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
