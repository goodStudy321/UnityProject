// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: GlobalData.prot

#ifndef _TDL_GLOBALDATA_H_
#define _TDL_GLOBALDATA_H_

#include "table_utility.h"

class GlobalData;
class GlobalDataManager;


// ===================================================================
#pragma pack( 1 )
class GlobalData
{
public:
	// nested types ----------------------------------------------------
	typedef Table::RepeatField< GlobalDataManager, uint32 >	values;
	
	typedef uint8	KeyType;
	
	static const uint32 Version = 920377639;
	
	uint8 Key() const;
	
	uint8 id() const;
	const char* name() const;
	const char* num1() const;
	const values& num2() const;
	const char* num3() const;
	const char* describe() const;
	
private:
	uint8  m_id;
	int    m_name;
	int    m_num1;
	values m_num2;
	int    m_num3;
	int    m_describe;
};
#pragma pack()

// -------------------------------------------------------------------
// source: G Global数据.xls, sheet: Sheet1
class GlobalDataManager : public Table::Manager, public Singleton< GlobalDataManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const GlobalData& Get( int index ) const;
	const GlobalData* Find( const uint8 key ) const;
	
private:
	friend class Singleton< GlobalDataManager >;
	typedef Table::RepeatField< GlobalDataManager, GlobalData >	GlobalDataArray;
	
	GlobalDataManager();
	~GlobalDataManager();
	
private:
	const GlobalDataArray *m_array;
};


// ===================================================================
// inline methords of GlobalData
inline uint8 GlobalData::Key() const
{
	return Combiner< uint8 >::Combine( m_id );
}

inline uint8 GlobalData::id() const
{
	return m_id;
}

inline const char* GlobalData::name() const
{
	return GlobalDataManager::Instance().String( m_name );
}

inline const char* GlobalData::num1() const
{
	return GlobalDataManager::Instance().String( m_num1 );
}

inline const GlobalData::values& GlobalData::num2() const
{
	return m_num2;
}

inline const char* GlobalData::num3() const
{
	return GlobalDataManager::Instance().String( m_num3 );
}

inline const char* GlobalData::describe() const
{
	return GlobalDataManager::Instance().String( m_describe );
}


// inline methords of GlobalDataManager
inline GlobalDataManager::GlobalDataManager()
	: m_array( NULL )
{
}

inline GlobalDataManager::~GlobalDataManager()
{
}

inline int GlobalDataManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* GlobalDataManager::Source() const
{
	return "globaldata.tbl";
}

inline bool GlobalDataManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const GlobalDataArray *)data;
	return true;
}

inline bool GlobalDataManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const GlobalDataArray *)data;
	return true;
}

inline const GlobalData& GlobalDataManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const GlobalData* GlobalDataManager::Find( uint8 key ) const
{
	assert( m_array );
	return BinarySerach< GlobalData >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
