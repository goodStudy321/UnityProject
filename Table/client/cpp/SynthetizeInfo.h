// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: SynthetizeInfo.prot

#ifndef _TDL_SYNTHETIZEINFO_H_
#define _TDL_SYNTHETIZEINFO_H_

#include "table_utility.h"

class SynthetizeInfo;
class SynthetizeInfoManager;


// ===================================================================
#pragma pack( 1 )
class SynthetizeInfo
{
public:
	// nested types ----------------------------------------------------
	class needItem
	{
	public:
		uint32 item_id() const;
		uint32 item_num() const;
		
	private:
		uint32 m_item_id;
		uint32 m_item_num;
	};
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< SynthetizeInfoManager, needItem >	needItems;
	
	// -------------------------------------------------------------------
	class newItem
	{
	public:
		uint32 item_id() const;
		uint8 item_type() const;
		uint16 weight() const;
		
	private:
		uint32 m_item_id;
		uint8  m_item_type;
		uint16 m_weight;
	};
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< SynthetizeInfoManager, newItem >	newItems;
	
	typedef uint32	KeyType;
	
	static const uint32 Version = 4046879601;
	
	uint32 Key() const;
	
	uint32 id() const;
	uint8 type() const;
	const char* info() const;
	const needItems& item_list() const;
	const newItems& new_item_list() const;
	uint16 base_succ() const;
	uint32 sp_item_id() const;
	uint16 add_secc() const;
	
private:
	uint32    m_id;
	uint8     m_type;
	int       m_info;
	needItems m_item_list;
	newItems  m_new_item_list;
	uint16    m_base_succ;
	uint32    m_sp_item_id;
	uint16    m_add_secc;
};
#pragma pack()

// -------------------------------------------------------------------
// source: H 合成表.xls, sheet: Sheet1
class SynthetizeInfoManager : public Table::Manager, public Singleton< SynthetizeInfoManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const SynthetizeInfo& Get( int index ) const;
	const SynthetizeInfo* Find( const uint32 key ) const;
	
private:
	friend class Singleton< SynthetizeInfoManager >;
	typedef Table::RepeatField< SynthetizeInfoManager, SynthetizeInfo >	SynthetizeInfoArray;
	
	SynthetizeInfoManager();
	~SynthetizeInfoManager();
	
private:
	const SynthetizeInfoArray *m_array;
};


// ===================================================================
// inline methords of SynthetizeInfo
inline uint32 SynthetizeInfo::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 SynthetizeInfo::id() const
{
	return m_id;
}

inline uint8 SynthetizeInfo::type() const
{
	return m_type;
}

inline const char* SynthetizeInfo::info() const
{
	return SynthetizeInfoManager::Instance().String( m_info );
}

inline const SynthetizeInfo::needItems& SynthetizeInfo::item_list() const
{
	return m_item_list;
}

inline const SynthetizeInfo::newItems& SynthetizeInfo::new_item_list() const
{
	return m_new_item_list;
}

inline uint16 SynthetizeInfo::base_succ() const
{
	return m_base_succ;
}

inline uint32 SynthetizeInfo::sp_item_id() const
{
	return m_sp_item_id;
}

inline uint16 SynthetizeInfo::add_secc() const
{
	return m_add_secc;
}


// inline methords of SynthetizeInfo::needItem
inline uint32 SynthetizeInfo::needItem::item_id() const
{
	return m_item_id;
}

inline uint32 SynthetizeInfo::needItem::item_num() const
{
	return m_item_num;
}


// inline methords of SynthetizeInfo::newItem
inline uint32 SynthetizeInfo::newItem::item_id() const
{
	return m_item_id;
}

inline uint8 SynthetizeInfo::newItem::item_type() const
{
	return m_item_type;
}

inline uint16 SynthetizeInfo::newItem::weight() const
{
	return m_weight;
}


// inline methords of SynthetizeInfoManager
inline SynthetizeInfoManager::SynthetizeInfoManager()
	: m_array( NULL )
{
}

inline SynthetizeInfoManager::~SynthetizeInfoManager()
{
}

inline int SynthetizeInfoManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* SynthetizeInfoManager::Source() const
{
	return "synthetizeinfo.tbl";
}

inline bool SynthetizeInfoManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const SynthetizeInfoArray *)data;
	return true;
}

inline bool SynthetizeInfoManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const SynthetizeInfoArray *)data;
	return true;
}

inline const SynthetizeInfo& SynthetizeInfoManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const SynthetizeInfo* SynthetizeInfoManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< SynthetizeInfo >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
