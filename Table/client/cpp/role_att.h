// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: role_att.prot

#ifndef _TDL_ROLE_ATT_H_
#define _TDL_ROLE_ATT_H_

#include "table_utility.h"

class RoleAtt;
class RoleAttManager;


// ===================================================================
#pragma pack( 1 )
class RoleAtt
{
public:
	// nested types ----------------------------------------------------
	typedef Table::RepeatField< RoleAttManager, uint16 >	AttRestaint;
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< RoleAttManager, uint32 >	skillid;
	
	typedef uint32	KeyType;
	
	static const uint32 Version = 4235927856;
	
	uint32 Key() const;
	
	uint32 id() const;
	uint8 sex() const;
	uint16 level() const;
	int64 exp() const;
	uint16 model_id() const;
	uint16 weapon_mod_id() const;
	uint16 profession() const;
	uint8 speed() const;
	int32 hp() const;
	uint32 att() const;
	uint32 def() const;
	uint32 hit() const;
	uint32 dodge() const;
	uint32 crit() const;
	uint32 toughness() const;
	uint32 pojia() const;
	uint32 shanghaijiacheng() const;
	uint32 baojishanghai() const;
	uint32 shanghaijianmian() const;
	const skillid& skill_id() const;
	uint32 view_distance() const;
	
private:
	uint32  m_id;
	uint8   m_sex;
	uint16  m_level;
	int64   m_exp;
	uint16  m_model_id;
	uint16  m_weapon_mod_id;
	uint16  m_profession;
	uint8   m_speed;
	int32   m_hp;
	uint32  m_att;
	uint32  m_def;
	uint32  m_hit;
	uint32  m_dodge;
	uint32  m_crit;
	uint32  m_toughness;
	uint32  m_pojia;
	uint32  m_shanghaijiacheng;
	uint32  m_baojishanghai;
	uint32  m_shanghaijianmian;
	skillid m_skill_id;
	uint32  m_view_distance;
};
#pragma pack()

// -------------------------------------------------------------------
// source: J 角色属性表.xls, sheet: Sheet1
class RoleAttManager : public Table::Manager, public Singleton< RoleAttManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const RoleAtt& Get( int index ) const;
	const RoleAtt* Find( const uint32 key ) const;
	
private:
	friend class Singleton< RoleAttManager >;
	typedef Table::RepeatField< RoleAttManager, RoleAtt >	RoleAttArray;
	
	RoleAttManager();
	~RoleAttManager();
	
private:
	const RoleAttArray *m_array;
};


// ===================================================================
// inline methords of RoleAtt
inline uint32 RoleAtt::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 RoleAtt::id() const
{
	return m_id;
}

inline uint8 RoleAtt::sex() const
{
	return m_sex;
}

inline uint16 RoleAtt::level() const
{
	return m_level;
}

inline int64 RoleAtt::exp() const
{
	return m_exp;
}

inline uint16 RoleAtt::model_id() const
{
	return m_model_id;
}

inline uint16 RoleAtt::weapon_mod_id() const
{
	return m_weapon_mod_id;
}

inline uint16 RoleAtt::profession() const
{
	return m_profession;
}

inline uint8 RoleAtt::speed() const
{
	return m_speed;
}

inline int32 RoleAtt::hp() const
{
	return m_hp;
}

inline uint32 RoleAtt::att() const
{
	return m_att;
}

inline uint32 RoleAtt::def() const
{
	return m_def;
}

inline uint32 RoleAtt::hit() const
{
	return m_hit;
}

inline uint32 RoleAtt::dodge() const
{
	return m_dodge;
}

inline uint32 RoleAtt::crit() const
{
	return m_crit;
}

inline uint32 RoleAtt::toughness() const
{
	return m_toughness;
}

inline uint32 RoleAtt::pojia() const
{
	return m_pojia;
}

inline uint32 RoleAtt::shanghaijiacheng() const
{
	return m_shanghaijiacheng;
}

inline uint32 RoleAtt::baojishanghai() const
{
	return m_baojishanghai;
}

inline uint32 RoleAtt::shanghaijianmian() const
{
	return m_shanghaijianmian;
}

inline const RoleAtt::skillid& RoleAtt::skill_id() const
{
	return m_skill_id;
}

inline uint32 RoleAtt::view_distance() const
{
	return m_view_distance;
}


// inline methords of RoleAttManager
inline RoleAttManager::RoleAttManager()
	: m_array( NULL )
{
}

inline RoleAttManager::~RoleAttManager()
{
}

inline int RoleAttManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* RoleAttManager::Source() const
{
	return "role_att.tbl";
}

inline bool RoleAttManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const RoleAttArray *)data;
	return true;
}

inline bool RoleAttManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const RoleAttArray *)data;
	return true;
}

inline const RoleAtt& RoleAttManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const RoleAtt* RoleAttManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< RoleAtt >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
