// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: mount_level.prot

#ifndef _TDL_MOUNT_LEVEL_H_
#define _TDL_MOUNT_LEVEL_H_

#include "table_utility.h"

class MountLevel;
class MountLevelManager;


// ===================================================================
#pragma pack( 1 )
class MountLevel
{
public:
	// nested types ----------------------------------------------------
	typedef uint16	KeyType;
	
	static const uint32 Version = 2821734058;
	
	uint16 Key() const;
	
	uint16 level() const;
	uint32 consume() const;
	
private:
	uint16 m_level;
	uint32 m_consume;
};
#pragma pack()

// -------------------------------------------------------------------
// source: Z 坐骑等级表.xls, sheet: Sheet1
class MountLevelManager : public Table::Manager, public Singleton< MountLevelManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const MountLevel& Get( int index ) const;
	const MountLevel* Find( const uint16 key ) const;
	
private:
	friend class Singleton< MountLevelManager >;
	typedef Table::RepeatField< MountLevelManager, MountLevel >	MountLevelArray;
	
	MountLevelManager();
	~MountLevelManager();
	
private:
	const MountLevelArray *m_array;
};


// ===================================================================
// inline methords of MountLevel
inline uint16 MountLevel::Key() const
{
	return Combiner< uint16 >::Combine( m_level );
}

inline uint16 MountLevel::level() const
{
	return m_level;
}

inline uint32 MountLevel::consume() const
{
	return m_consume;
}


// inline methords of MountLevelManager
inline MountLevelManager::MountLevelManager()
	: m_array( NULL )
{
}

inline MountLevelManager::~MountLevelManager()
{
}

inline int MountLevelManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* MountLevelManager::Source() const
{
	return "mount_level.tbl";
}

inline bool MountLevelManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const MountLevelArray *)data;
	return true;
}

inline bool MountLevelManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const MountLevelArray *)data;
	return true;
}

inline const MountLevel& MountLevelManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const MountLevel* MountLevelManager::Find( uint16 key ) const
{
	assert( m_array );
	return BinarySerach< MountLevel >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
