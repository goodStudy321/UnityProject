// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: PetInfo.prot

#ifndef _TDL_PETINFO_H_
#define _TDL_PETINFO_H_

#include "table_utility.h"

class PetInfo;
class PetInfoManager;


// ===================================================================
#pragma pack( 1 )
class PetInfo
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 57638037;
	
	uint32 Key() const;
	
	uint32 id() const;
	const char* name() const;
	uint16 model_id() const;
	uint16 ui_model_id() const;
	const char* icon() const;
	uint8 mount_point() const;
	
private:
	uint32 m_id;
	int    m_name;
	uint16 m_model_id;
	uint16 m_ui_model_id;
	int    m_icon;
	uint8  m_mount_point;
};
#pragma pack()

// -------------------------------------------------------------------
// source: C 宠物基础表.xls, sheet: Sheet1
class PetInfoManager : public Table::Manager, public Singleton< PetInfoManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const PetInfo& Get( int index ) const;
	const PetInfo* Find( const uint32 key ) const;
	
private:
	friend class Singleton< PetInfoManager >;
	typedef Table::RepeatField< PetInfoManager, PetInfo >	PetInfoArray;
	
	PetInfoManager();
	~PetInfoManager();
	
private:
	const PetInfoArray *m_array;
};


// ===================================================================
// inline methords of PetInfo
inline uint32 PetInfo::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 PetInfo::id() const
{
	return m_id;
}

inline const char* PetInfo::name() const
{
	return PetInfoManager::Instance().String( m_name );
}

inline uint16 PetInfo::model_id() const
{
	return m_model_id;
}

inline uint16 PetInfo::ui_model_id() const
{
	return m_ui_model_id;
}

inline const char* PetInfo::icon() const
{
	return PetInfoManager::Instance().String( m_icon );
}

inline uint8 PetInfo::mount_point() const
{
	return m_mount_point;
}


// inline methords of PetInfoManager
inline PetInfoManager::PetInfoManager()
	: m_array( NULL )
{
}

inline PetInfoManager::~PetInfoManager()
{
}

inline int PetInfoManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* PetInfoManager::Source() const
{
	return "petinfo.tbl";
}

inline bool PetInfoManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const PetInfoArray *)data;
	return true;
}

inline bool PetInfoManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const PetInfoArray *)data;
	return true;
}

inline const PetInfo& PetInfoManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const PetInfo* PetInfoManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< PetInfo >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
