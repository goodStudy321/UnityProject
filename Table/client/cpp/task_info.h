// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: task_info.prot

#ifndef _TDL_TASK_INFO_H_
#define _TDL_TASK_INFO_H_

#include "table_utility.h"

class TaskInfo;
class TaskInfoManager;


// ===================================================================
#pragma pack( 1 )
class TaskInfo
{
public:
	// nested types ----------------------------------------------------
	typedef Table::RepeatField< TaskInfoManager, uint64 >	data;
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< TaskInfoManager, data >	items;
	
	typedef uint32	KeyType;
	
	static const uint32 Version = 722934034;
	
	uint32 Key() const;
	
	uint32 id() const;
	const char* name() const;
	uint16 chapter() const;
	const char* chapter_des() const;
	uint32 first_id() const;
	uint32 next_id() const;
	uint8 need_lv() const;
	uint8 auto_receive() const;
	uint8 auto_submit() const;
	uint8 show_talk() const;
	uint64 npc_receive() const;
	uint64 npc_submit() const;
	const char* talk() const;
	uint8 target() const;
	const data& target_param() const;
	const data& exp_reward() const;
	const data& currency_reward() const;
	const items& item_reward() const;
	
private:
	uint32 m_id;
	int    m_name;
	uint16 m_chapter;
	int    m_chapter_des;
	uint32 m_first_id;
	uint32 m_next_id;
	uint8  m_need_lv;
	uint8  m_auto_receive;
	uint8  m_auto_submit;
	uint8  m_show_talk;
	uint64 m_npc_receive;
	uint64 m_npc_submit;
	int    m_talk;
	uint8  m_target;
	data   m_target_param;
	data   m_exp_reward;
	data   m_currency_reward;
	items  m_item_reward;
};
#pragma pack()

// -------------------------------------------------------------------
// source: R 任务配置.xls, sheet: Sheet1
class TaskInfoManager : public Table::Manager, public Singleton< TaskInfoManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const TaskInfo& Get( int index ) const;
	const TaskInfo* Find( const uint32 key ) const;
	
private:
	friend class Singleton< TaskInfoManager >;
	typedef Table::RepeatField< TaskInfoManager, TaskInfo >	TaskInfoArray;
	
	TaskInfoManager();
	~TaskInfoManager();
	
private:
	const TaskInfoArray *m_array;
};


// ===================================================================
// inline methords of TaskInfo
inline uint32 TaskInfo::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 TaskInfo::id() const
{
	return m_id;
}

inline const char* TaskInfo::name() const
{
	return TaskInfoManager::Instance().String( m_name );
}

inline uint16 TaskInfo::chapter() const
{
	return m_chapter;
}

inline const char* TaskInfo::chapter_des() const
{
	return TaskInfoManager::Instance().String( m_chapter_des );
}

inline uint32 TaskInfo::first_id() const
{
	return m_first_id;
}

inline uint32 TaskInfo::next_id() const
{
	return m_next_id;
}

inline uint8 TaskInfo::need_lv() const
{
	return m_need_lv;
}

inline uint8 TaskInfo::auto_receive() const
{
	return m_auto_receive;
}

inline uint8 TaskInfo::auto_submit() const
{
	return m_auto_submit;
}

inline uint8 TaskInfo::show_talk() const
{
	return m_show_talk;
}

inline uint64 TaskInfo::npc_receive() const
{
	return m_npc_receive;
}

inline uint64 TaskInfo::npc_submit() const
{
	return m_npc_submit;
}

inline const char* TaskInfo::talk() const
{
	return TaskInfoManager::Instance().String( m_talk );
}

inline uint8 TaskInfo::target() const
{
	return m_target;
}

inline const TaskInfo::data& TaskInfo::target_param() const
{
	return m_target_param;
}

inline const TaskInfo::data& TaskInfo::exp_reward() const
{
	return m_exp_reward;
}

inline const TaskInfo::data& TaskInfo::currency_reward() const
{
	return m_currency_reward;
}

inline const TaskInfo::items& TaskInfo::item_reward() const
{
	return m_item_reward;
}


// inline methords of TaskInfoManager
inline TaskInfoManager::TaskInfoManager()
	: m_array( NULL )
{
}

inline TaskInfoManager::~TaskInfoManager()
{
}

inline int TaskInfoManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* TaskInfoManager::Source() const
{
	return "task_info.tbl";
}

inline bool TaskInfoManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const TaskInfoArray *)data;
	return true;
}

inline bool TaskInfoManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const TaskInfoArray *)data;
	return true;
}

inline const TaskInfo& TaskInfoManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const TaskInfo* TaskInfoManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< TaskInfo >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
