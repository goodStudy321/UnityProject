// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: Property_Name.prot

#ifndef _TDL_PROPERTY_NAME_H_
#define _TDL_PROPERTY_NAME_H_

#include "table_utility.h"

class PropertyName;
class PropertyNameManager;


// ===================================================================
#pragma pack( 1 )
class PropertyName
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 4275571100;
	
	uint32 Key() const;
	
	uint32 id() const;
	const char* propertyname() const;
	uint8 is_show_typ() const;
	const char* gain_des() const;
	
private:
	uint32 m_id;
	int    m_propertyName;
	uint8  m_is_show_typ;
	int    m_gain_des;
};
#pragma pack()

// -------------------------------------------------------------------
// source: S 角色属性字段.xls, sheet: Sheet1
class PropertyNameManager : public Table::Manager, public Singleton< PropertyNameManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const PropertyName& Get( int index ) const;
	const PropertyName* Find( const uint32 key ) const;
	
private:
	friend class Singleton< PropertyNameManager >;
	typedef Table::RepeatField< PropertyNameManager, PropertyName >	PropertyNameArray;
	
	PropertyNameManager();
	~PropertyNameManager();
	
private:
	const PropertyNameArray *m_array;
};


// ===================================================================
// inline methords of PropertyName
inline uint32 PropertyName::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 PropertyName::id() const
{
	return m_id;
}

inline const char* PropertyName::propertyname() const
{
	return PropertyNameManager::Instance().String( m_propertyName );
}

inline uint8 PropertyName::is_show_typ() const
{
	return m_is_show_typ;
}

inline const char* PropertyName::gain_des() const
{
	return PropertyNameManager::Instance().String( m_gain_des );
}


// inline methords of PropertyNameManager
inline PropertyNameManager::PropertyNameManager()
	: m_array( NULL )
{
}

inline PropertyNameManager::~PropertyNameManager()
{
}

inline int PropertyNameManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* PropertyNameManager::Source() const
{
	return "property_name.tbl";
}

inline bool PropertyNameManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const PropertyNameArray *)data;
	return true;
}

inline bool PropertyNameManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const PropertyNameArray *)data;
	return true;
}

inline const PropertyName& PropertyNameManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const PropertyName* PropertyNameManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< PropertyName >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
