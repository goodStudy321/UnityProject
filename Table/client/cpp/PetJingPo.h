// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: PetJingPo.prot

#ifndef _TDL_PETJINGPO_H_
#define _TDL_PETJINGPO_H_

#include "table_utility.h"

class PetJingPo;
class PetJingPoManager;


// ===================================================================
#pragma pack( 1 )
class PetJingPo
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 3317545137;
	
	uint32 Key() const;
	
	uint32 id() const;
	const char* name() const;
	const char* icon() const;
	uint32 att() const;
	uint32 def() const;
	uint32 hp() const;
	uint32 crit_max() const;
	uint32 crit() const;
	uint16 usenum() const;
	
private:
	uint32 m_id;
	int    m_name;
	int    m_icon;
	uint32 m_att;
	uint32 m_def;
	uint32 m_hp;
	uint32 m_crit_max;
	uint32 m_crit;
	uint16 m_useNum;
};
#pragma pack()

// -------------------------------------------------------------------
// source: C 宠物精魄表.xls, sheet: Sheet1
class PetJingPoManager : public Table::Manager, public Singleton< PetJingPoManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const PetJingPo& Get( int index ) const;
	const PetJingPo* Find( const uint32 key ) const;
	
private:
	friend class Singleton< PetJingPoManager >;
	typedef Table::RepeatField< PetJingPoManager, PetJingPo >	PetJingPoArray;
	
	PetJingPoManager();
	~PetJingPoManager();
	
private:
	const PetJingPoArray *m_array;
};


// ===================================================================
// inline methords of PetJingPo
inline uint32 PetJingPo::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 PetJingPo::id() const
{
	return m_id;
}

inline const char* PetJingPo::name() const
{
	return PetJingPoManager::Instance().String( m_name );
}

inline const char* PetJingPo::icon() const
{
	return PetJingPoManager::Instance().String( m_icon );
}

inline uint32 PetJingPo::att() const
{
	return m_att;
}

inline uint32 PetJingPo::def() const
{
	return m_def;
}

inline uint32 PetJingPo::hp() const
{
	return m_hp;
}

inline uint32 PetJingPo::crit_max() const
{
	return m_crit_max;
}

inline uint32 PetJingPo::crit() const
{
	return m_crit;
}

inline uint16 PetJingPo::usenum() const
{
	return m_useNum;
}


// inline methords of PetJingPoManager
inline PetJingPoManager::PetJingPoManager()
	: m_array( NULL )
{
}

inline PetJingPoManager::~PetJingPoManager()
{
}

inline int PetJingPoManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* PetJingPoManager::Source() const
{
	return "petjingpo.tbl";
}

inline bool PetJingPoManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const PetJingPoArray *)data;
	return true;
}

inline bool PetJingPoManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const PetJingPoArray *)data;
	return true;
}

inline const PetJingPo& PetJingPoManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const PetJingPo* PetJingPoManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< PetJingPo >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
