// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: role_pro.prot

#ifndef _TDL_ROLE_PRO_H_
#define _TDL_ROLE_PRO_H_

#include "table_utility.h"

class RolePro;
class RoleProManager;


// ===================================================================
#pragma pack( 1 )
class RolePro
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 493378320;
	
	uint32 Key() const;
	
	uint32 id() const;
	const char* pro_name() const;
	
private:
	uint32 m_id;
	int    m_pro_name;
};
#pragma pack()

// -------------------------------------------------------------------
// source: S 角色属性字段.xls, sheet: Sheet1
class RoleProManager : public Table::Manager, public Singleton< RoleProManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const RolePro& Get( int index ) const;
	const RolePro* Find( const uint32 key ) const;
	
private:
	friend class Singleton< RoleProManager >;
	typedef Table::RepeatField< RoleProManager, RolePro >	RoleProArray;
	
	RoleProManager();
	~RoleProManager();
	
private:
	const RoleProArray *m_array;
};


// ===================================================================
// inline methords of RolePro
inline uint32 RolePro::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 RolePro::id() const
{
	return m_id;
}

inline const char* RolePro::pro_name() const
{
	return RoleProManager::Instance().String( m_pro_name );
}


// inline methords of RoleProManager
inline RoleProManager::RoleProManager()
	: m_array( NULL )
{
}

inline RoleProManager::~RoleProManager()
{
}

inline int RoleProManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* RoleProManager::Source() const
{
	return "role_pro.tbl";
}

inline bool RoleProManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const RoleProArray *)data;
	return true;
}

inline bool RoleProManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const RoleProArray *)data;
	return true;
}

inline const RolePro& RoleProManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const RolePro* RoleProManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< RolePro >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
