// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: LocalCfg.prot

#ifndef _TDL_LOCALCFG_H_
#define _TDL_LOCALCFG_H_

#include "table_utility.h"

class LocalCfg;
class LocalCfgManager;


// ===================================================================
#pragma pack( 1 )
class LocalCfg
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 4085807235;
	
	uint32 Key() const;
	
	uint32 id() const;
	const char* ldes() const;
	const char* des() const;
	
private:
	uint32 m_id;
	int    m_lDes;
	int    m_des;
};
#pragma pack()

// -------------------------------------------------------------------
// source: B_本地化.xls, sheet: CS
class LocalCfgManager : public Table::Manager, public Singleton< LocalCfgManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const LocalCfg& Get( int index ) const;
	const LocalCfg* Find( const uint32 key ) const;
	
private:
	friend class Singleton< LocalCfgManager >;
	typedef Table::RepeatField< LocalCfgManager, LocalCfg >	LocalCfgArray;
	
	LocalCfgManager();
	~LocalCfgManager();
	
private:
	const LocalCfgArray *m_array;
};


// ===================================================================
// inline methords of LocalCfg
inline uint32 LocalCfg::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 LocalCfg::id() const
{
	return m_id;
}

inline const char* LocalCfg::ldes() const
{
	return LocalCfgManager::Instance().String( m_lDes );
}

inline const char* LocalCfg::des() const
{
	return LocalCfgManager::Instance().String( m_des );
}


// inline methords of LocalCfgManager
inline LocalCfgManager::LocalCfgManager()
	: m_array( NULL )
{
}

inline LocalCfgManager::~LocalCfgManager()
{
}

inline int LocalCfgManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* LocalCfgManager::Source() const
{
	return "localcfg.tbl";
}

inline bool LocalCfgManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const LocalCfgArray *)data;
	return true;
}

inline bool LocalCfgManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const LocalCfgArray *)data;
	return true;
}

inline const LocalCfg& LocalCfgManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const LocalCfg* LocalCfgManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< LocalCfg >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
