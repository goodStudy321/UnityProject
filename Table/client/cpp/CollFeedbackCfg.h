// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: CollFeedbackCfg.prot

#ifndef _TDL_COLLFEEDBACKCFG_H_
#define _TDL_COLLFEEDBACKCFG_H_

#include "table_utility.h"

class CollFeedbackCfg;
class CollFeedbackCfgManager;


// ===================================================================
#pragma pack( 1 )
class CollFeedbackCfg
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 778420751;
	
	uint32 Key() const;
	
	uint32 id() const;
	uint8 ty() const;
	uint8 at() const;
	const char* name() const;
	uint32 time() const;
	const char* flowname() const;
	
private:
	uint32 m_id;
	uint8  m_ty;
	uint8  m_at;
	int    m_name;
	uint32 m_time;
	int    m_flowName;
};
#pragma pack()

// -------------------------------------------------------------------
// source: C 采集反馈配置.xls, sheet: Sheet1
class CollFeedbackCfgManager : public Table::Manager, public Singleton< CollFeedbackCfgManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const CollFeedbackCfg& Get( int index ) const;
	const CollFeedbackCfg* Find( const uint32 key ) const;
	
private:
	friend class Singleton< CollFeedbackCfgManager >;
	typedef Table::RepeatField< CollFeedbackCfgManager, CollFeedbackCfg >	CollFeedbackCfgArray;
	
	CollFeedbackCfgManager();
	~CollFeedbackCfgManager();
	
private:
	const CollFeedbackCfgArray *m_array;
};


// ===================================================================
// inline methords of CollFeedbackCfg
inline uint32 CollFeedbackCfg::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 CollFeedbackCfg::id() const
{
	return m_id;
}

inline uint8 CollFeedbackCfg::ty() const
{
	return m_ty;
}

inline uint8 CollFeedbackCfg::at() const
{
	return m_at;
}

inline const char* CollFeedbackCfg::name() const
{
	return CollFeedbackCfgManager::Instance().String( m_name );
}

inline uint32 CollFeedbackCfg::time() const
{
	return m_time;
}

inline const char* CollFeedbackCfg::flowname() const
{
	return CollFeedbackCfgManager::Instance().String( m_flowName );
}


// inline methords of CollFeedbackCfgManager
inline CollFeedbackCfgManager::CollFeedbackCfgManager()
	: m_array( NULL )
{
}

inline CollFeedbackCfgManager::~CollFeedbackCfgManager()
{
}

inline int CollFeedbackCfgManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* CollFeedbackCfgManager::Source() const
{
	return "collfeedbackcfg.tbl";
}

inline bool CollFeedbackCfgManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const CollFeedbackCfgArray *)data;
	return true;
}

inline bool CollFeedbackCfgManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const CollFeedbackCfgArray *)data;
	return true;
}

inline const CollFeedbackCfg& CollFeedbackCfgManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const CollFeedbackCfg* CollFeedbackCfgManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< CollFeedbackCfg >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
