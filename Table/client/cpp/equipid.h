// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: equipid.prot

#ifndef _TDL_EQUIPID_H_
#define _TDL_EQUIPID_H_

#include "table_utility.h"

class EquipId;
class EquipIdManager;


// ===================================================================
#pragma pack( 1 )
class EquipId
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 4140575921;
	
	uint32 Key() const;
	
	uint32 dropid() const;
	uint32 id0() const;
	uint32 id1() const;
	uint32 id2() const;
	uint32 id3() const;
	
private:
	uint32 m_dropid;
	uint32 m_id0;
	uint32 m_id1;
	uint32 m_id2;
	uint32 m_id3;
};
#pragma pack()

// -------------------------------------------------------------------
// source: Z 装备id对应表.xls, sheet: Sheet1
class EquipIdManager : public Table::Manager, public Singleton< EquipIdManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const EquipId& Get( int index ) const;
	const EquipId* Find( const uint32 key ) const;
	
private:
	friend class Singleton< EquipIdManager >;
	typedef Table::RepeatField< EquipIdManager, EquipId >	EquipIdArray;
	
	EquipIdManager();
	~EquipIdManager();
	
private:
	const EquipIdArray *m_array;
};


// ===================================================================
// inline methords of EquipId
inline uint32 EquipId::Key() const
{
	return Combiner< uint32 >::Combine( m_dropid );
}

inline uint32 EquipId::dropid() const
{
	return m_dropid;
}

inline uint32 EquipId::id0() const
{
	return m_id0;
}

inline uint32 EquipId::id1() const
{
	return m_id1;
}

inline uint32 EquipId::id2() const
{
	return m_id2;
}

inline uint32 EquipId::id3() const
{
	return m_id3;
}


// inline methords of EquipIdManager
inline EquipIdManager::EquipIdManager()
	: m_array( NULL )
{
}

inline EquipIdManager::~EquipIdManager()
{
}

inline int EquipIdManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* EquipIdManager::Source() const
{
	return "equipid.tbl";
}

inline bool EquipIdManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const EquipIdArray *)data;
	return true;
}

inline bool EquipIdManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const EquipIdArray *)data;
	return true;
}

inline const EquipId& EquipIdManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const EquipId* EquipIdManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< EquipId >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
