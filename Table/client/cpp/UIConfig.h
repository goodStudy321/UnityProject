// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: UIConfig.prot

#ifndef _TDL_UICONFIG_H_
#define _TDL_UICONFIG_H_

#include "table_utility.h"

class UIConfig;
class UIConfigManager;


// ===================================================================
#pragma pack( 1 )
class UIConfig
{
public:
	// nested types ----------------------------------------------------
	typedef uint16	KeyType;
	
	static const uint32 Version = 391773491;
	
	uint16 Key() const;
	
	uint16 id() const;
	const char* typename() const;
	uint16 sort() const;
	uint8 bgeffect() const;
	uint8 onoffeffect() const;
	uint8 onofftype() const;
	const char* openaudio() const;
	const char* closeaudio() const;
	
private:
	uint16 m_id;
	int    m_typeName;
	uint16 m_sort;
	uint8  m_bgEffect;
	uint8  m_onOffEffect;
	uint8  m_onOffType;
	int    m_openAudio;
	int    m_closeAudio;
};
#pragma pack()

// -------------------------------------------------------------------
// source: U UI配置表.xls, sheet: Sheet1
class UIConfigManager : public Table::Manager, public Singleton< UIConfigManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const UIConfig& Get( int index ) const;
	const UIConfig* Find( const uint16 key ) const;
	
private:
	friend class Singleton< UIConfigManager >;
	typedef Table::RepeatField< UIConfigManager, UIConfig >	UIConfigArray;
	
	UIConfigManager();
	~UIConfigManager();
	
private:
	const UIConfigArray *m_array;
};


// ===================================================================
// inline methords of UIConfig
inline uint16 UIConfig::Key() const
{
	return Combiner< uint16 >::Combine( m_id );
}

inline uint16 UIConfig::id() const
{
	return m_id;
}

inline const char* UIConfig::typename() const
{
	return UIConfigManager::Instance().String( m_typeName );
}

inline uint16 UIConfig::sort() const
{
	return m_sort;
}

inline uint8 UIConfig::bgeffect() const
{
	return m_bgEffect;
}

inline uint8 UIConfig::onoffeffect() const
{
	return m_onOffEffect;
}

inline uint8 UIConfig::onofftype() const
{
	return m_onOffType;
}

inline const char* UIConfig::openaudio() const
{
	return UIConfigManager::Instance().String( m_openAudio );
}

inline const char* UIConfig::closeaudio() const
{
	return UIConfigManager::Instance().String( m_closeAudio );
}


// inline methords of UIConfigManager
inline UIConfigManager::UIConfigManager()
	: m_array( NULL )
{
}

inline UIConfigManager::~UIConfigManager()
{
}

inline int UIConfigManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* UIConfigManager::Source() const
{
	return "uiconfig.tbl";
}

inline bool UIConfigManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const UIConfigArray *)data;
	return true;
}

inline bool UIConfigManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const UIConfigArray *)data;
	return true;
}

inline const UIConfig& UIConfigManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const UIConfig* UIConfigManager::Find( uint16 key ) const
{
	assert( m_array );
	return BinarySerach< UIConfig >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
