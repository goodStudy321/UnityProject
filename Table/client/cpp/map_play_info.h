// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: map_play_info.prot

#ifndef _TDL_MAP_PLAY_INFO_H_
#define _TDL_MAP_PLAY_INFO_H_

#include "table_utility.h"

class MapPlayInfo;
class MapPlayInfoManager;


// ===================================================================
#pragma pack( 1 )
class MapPlayInfo
{
public:
	// nested types ----------------------------------------------------
	typedef Table::RepeatField< MapPlayInfoManager, uint32 >	TypeIdList;
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< MapPlayInfoManager, uint16 >	tarTypeLst;
	
	// -------------------------------------------------------------------
	class vector2
	{
	public:
		float x() const;
		float z() const;
		
	private:
		float m_x;
		float m_z;
	};
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< MapPlayInfoManager, vector2 >	PosList;
	
	typedef uint16	KeyType;
	
	static const uint32 Version = 1331763381;
	
	uint16 Key() const;
	
	uint16 playid() const;
	const TypeIdList& atttypeidlst() const;
	const tarTypeLst& atttypelist() const;
	const PosList& loopposlst() const;
	const PosList& linearposlst() const;
	uint32 staytime() const;
	uint32 hanguptime() const;
	
private:
	uint16     m_playId;
	TypeIdList m_attTypeIdLst;
	tarTypeLst m_attTypeList;
	PosList    m_loopPosLst;
	PosList    m_linearPosLst;
	uint32     m_stayTime;
	uint32     m_hangupTime;
};
#pragma pack()

// -------------------------------------------------------------------
// source: D 地图玩法配置表.xls, sheet: Sheet1
class MapPlayInfoManager : public Table::Manager, public Singleton< MapPlayInfoManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const MapPlayInfo& Get( int index ) const;
	const MapPlayInfo* Find( const uint16 key ) const;
	
private:
	friend class Singleton< MapPlayInfoManager >;
	typedef Table::RepeatField< MapPlayInfoManager, MapPlayInfo >	MapPlayInfoArray;
	
	MapPlayInfoManager();
	~MapPlayInfoManager();
	
private:
	const MapPlayInfoArray *m_array;
};


// ===================================================================
// inline methords of MapPlayInfo
inline uint16 MapPlayInfo::Key() const
{
	return Combiner< uint16 >::Combine( m_playId );
}

inline uint16 MapPlayInfo::playid() const
{
	return m_playId;
}

inline const MapPlayInfo::TypeIdList& MapPlayInfo::atttypeidlst() const
{
	return m_attTypeIdLst;
}

inline const MapPlayInfo::tarTypeLst& MapPlayInfo::atttypelist() const
{
	return m_attTypeList;
}

inline const MapPlayInfo::PosList& MapPlayInfo::loopposlst() const
{
	return m_loopPosLst;
}

inline const MapPlayInfo::PosList& MapPlayInfo::linearposlst() const
{
	return m_linearPosLst;
}

inline uint32 MapPlayInfo::staytime() const
{
	return m_stayTime;
}

inline uint32 MapPlayInfo::hanguptime() const
{
	return m_hangupTime;
}


// inline methords of MapPlayInfo::vector2
inline float MapPlayInfo::vector2::x() const
{
	return m_x;
}

inline float MapPlayInfo::vector2::z() const
{
	return m_z;
}


// inline methords of MapPlayInfoManager
inline MapPlayInfoManager::MapPlayInfoManager()
	: m_array( NULL )
{
}

inline MapPlayInfoManager::~MapPlayInfoManager()
{
}

inline int MapPlayInfoManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* MapPlayInfoManager::Source() const
{
	return "map_play_info.tbl";
}

inline bool MapPlayInfoManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const MapPlayInfoArray *)data;
	return true;
}

inline bool MapPlayInfoManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const MapPlayInfoArray *)data;
	return true;
}

inline const MapPlayInfo& MapPlayInfoManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const MapPlayInfo* MapPlayInfoManager::Find( uint16 key ) const
{
	assert( m_array );
	return BinarySerach< MapPlayInfo >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
