// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: mount_info.prot

#ifndef _TDL_MOUNT_INFO_H_
#define _TDL_MOUNT_INFO_H_

#include "table_utility.h"

class MountInfo;
class MountInfoManager;


// ===================================================================
#pragma pack( 1 )
class MountInfo
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 2083995189;
	
	uint32 Key() const;
	
	uint32 baseid() const;
	const char* name() const;
	uint16 model_id() const;
	uint16 model_ui_id() const;
	uint8 mount_point() const;
	uint32 open_skill() const;
	const char* role_idle_id() const;
	const char* role_move_id() const;
	
private:
	uint32 m_baseid;
	int    m_name;
	uint16 m_model_id;
	uint16 m_model_ui_id;
	uint8  m_mount_point;
	uint32 m_open_skill;
	int    m_role_idle_id;
	int    m_role_move_id;
};
#pragma pack()

// -------------------------------------------------------------------
// source: Z 坐骑基础表.xls, sheet: Sheet1
class MountInfoManager : public Table::Manager, public Singleton< MountInfoManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const MountInfo& Get( int index ) const;
	const MountInfo* Find( const uint32 key ) const;
	
private:
	friend class Singleton< MountInfoManager >;
	typedef Table::RepeatField< MountInfoManager, MountInfo >	MountInfoArray;
	
	MountInfoManager();
	~MountInfoManager();
	
private:
	const MountInfoArray *m_array;
};


// ===================================================================
// inline methords of MountInfo
inline uint32 MountInfo::Key() const
{
	return Combiner< uint32 >::Combine( m_baseid );
}

inline uint32 MountInfo::baseid() const
{
	return m_baseid;
}

inline const char* MountInfo::name() const
{
	return MountInfoManager::Instance().String( m_name );
}

inline uint16 MountInfo::model_id() const
{
	return m_model_id;
}

inline uint16 MountInfo::model_ui_id() const
{
	return m_model_ui_id;
}

inline uint8 MountInfo::mount_point() const
{
	return m_mount_point;
}

inline uint32 MountInfo::open_skill() const
{
	return m_open_skill;
}

inline const char* MountInfo::role_idle_id() const
{
	return MountInfoManager::Instance().String( m_role_idle_id );
}

inline const char* MountInfo::role_move_id() const
{
	return MountInfoManager::Instance().String( m_role_move_id );
}


// inline methords of MountInfoManager
inline MountInfoManager::MountInfoManager()
	: m_array( NULL )
{
}

inline MountInfoManager::~MountInfoManager()
{
}

inline int MountInfoManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* MountInfoManager::Source() const
{
	return "mount_info.tbl";
}

inline bool MountInfoManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const MountInfoArray *)data;
	return true;
}

inline bool MountInfoManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const MountInfoArray *)data;
	return true;
}

inline const MountInfo& MountInfoManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const MountInfo* MountInfoManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< MountInfo >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
