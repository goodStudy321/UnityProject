// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: quality_info.prot

#ifndef _TDL_QUALITY_INFO_H_
#define _TDL_QUALITY_INFO_H_

#include "table_utility.h"

class QualityInfo;
class QualityInfoManager;


// ===================================================================
#pragma pack( 1 )
class QualityInfo
{
public:
	// nested types ----------------------------------------------------
	typedef Table::RepeatField< QualityInfoManager, Table::String< QualityInfoManager > >	matList;
	
	typedef uint32	KeyType;
	
	static const uint32 Version = 681279867;
	
	uint32 Key() const;
	
	uint32 id() const;
	const char* name() const;
	const matList& h_mat_info() const;
	const matList& l_mat_info() const;
	
private:
	uint32  m_id;
	int     m_name;
	matList m_h_mat_info;
	matList m_l_mat_info;
};
#pragma pack()

// -------------------------------------------------------------------
// source: Z 质量资源配置.xls, sheet: Sheet1
class QualityInfoManager : public Table::Manager, public Singleton< QualityInfoManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const QualityInfo& Get( int index ) const;
	const QualityInfo* Find( const uint32 key ) const;
	
private:
	friend class Singleton< QualityInfoManager >;
	typedef Table::RepeatField< QualityInfoManager, QualityInfo >	QualityInfoArray;
	
	QualityInfoManager();
	~QualityInfoManager();
	
private:
	const QualityInfoArray *m_array;
};


// ===================================================================
// inline methords of QualityInfo
inline uint32 QualityInfo::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 QualityInfo::id() const
{
	return m_id;
}

inline const char* QualityInfo::name() const
{
	return QualityInfoManager::Instance().String( m_name );
}

inline const QualityInfo::matList& QualityInfo::h_mat_info() const
{
	return m_h_mat_info;
}

inline const QualityInfo::matList& QualityInfo::l_mat_info() const
{
	return m_l_mat_info;
}


// inline methords of QualityInfoManager
inline QualityInfoManager::QualityInfoManager()
	: m_array( NULL )
{
}

inline QualityInfoManager::~QualityInfoManager()
{
}

inline int QualityInfoManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* QualityInfoManager::Source() const
{
	return "quality_info.tbl";
}

inline bool QualityInfoManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const QualityInfoArray *)data;
	return true;
}

inline bool QualityInfoManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const QualityInfoArray *)data;
	return true;
}

inline const QualityInfo& QualityInfoManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const QualityInfo* QualityInfoManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< QualityInfo >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
