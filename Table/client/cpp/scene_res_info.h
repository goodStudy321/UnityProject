// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: scene_res_info.prot

#ifndef _TDL_SCENE_RES_INFO_H_
#define _TDL_SCENE_RES_INFO_H_

#include "table_utility.h"

class SceneResInfo;
class SceneResInfoManager;


// ===================================================================
#pragma pack( 1 )
class SceneResInfo
{
public:
	// nested types ----------------------------------------------------
	class vector3
	{
	public:
		int32 x() const;
		int32 y() const;
		int32 z() const;
		
	private:
		int32 m_x;
		int32 m_y;
		int32 m_z;
	};
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< SceneResInfoManager, uint32 >	npcs;
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< SceneResInfoManager, uint32 >	triggers;
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< SceneResInfoManager, Table::String< SceneResInfoManager > >	prefabList;
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< SceneResInfoManager, uint16 >	uilist;
	
	typedef uint32	KeyType;
	
	static const uint32 Version = 384478367;
	
	uint32 Key() const;
	
	uint32 id() const;
	const char* res_name() const;
	const uilist& res_ui() const;
	const prefabList& gridname() const;
	const prefabList& music() const;
	const npcs& npc_list() const;
	const triggers& update_list() const;
	const triggers& trigger() const;
	const triggers& map_id() const;
	const prefabList& prefabs() const;
	
private:
	uint32     m_id;
	int        m_res_name;
	uilist     m_res_UI;
	prefabList m_gridName;
	prefabList m_music;
	npcs       m_npc_list;
	triggers   m_update_list;
	triggers   m_Trigger;
	triggers   m_map_id;
	prefabList m_prefabs;
};
#pragma pack()

// -------------------------------------------------------------------
// source: C 场景预加载资源表.xls, sheet: Sheet1
class SceneResInfoManager : public Table::Manager, public Singleton< SceneResInfoManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const SceneResInfo& Get( int index ) const;
	const SceneResInfo* Find( const uint32 key ) const;
	
private:
	friend class Singleton< SceneResInfoManager >;
	typedef Table::RepeatField< SceneResInfoManager, SceneResInfo >	SceneResInfoArray;
	
	SceneResInfoManager();
	~SceneResInfoManager();
	
private:
	const SceneResInfoArray *m_array;
};


// ===================================================================
// inline methords of SceneResInfo
inline uint32 SceneResInfo::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 SceneResInfo::id() const
{
	return m_id;
}

inline const char* SceneResInfo::res_name() const
{
	return SceneResInfoManager::Instance().String( m_res_name );
}

inline const SceneResInfo::uilist& SceneResInfo::res_ui() const
{
	return m_res_UI;
}

inline const SceneResInfo::prefabList& SceneResInfo::gridname() const
{
	return m_gridName;
}

inline const SceneResInfo::prefabList& SceneResInfo::music() const
{
	return m_music;
}

inline const SceneResInfo::npcs& SceneResInfo::npc_list() const
{
	return m_npc_list;
}

inline const SceneResInfo::triggers& SceneResInfo::update_list() const
{
	return m_update_list;
}

inline const SceneResInfo::triggers& SceneResInfo::trigger() const
{
	return m_Trigger;
}

inline const SceneResInfo::triggers& SceneResInfo::map_id() const
{
	return m_map_id;
}

inline const SceneResInfo::prefabList& SceneResInfo::prefabs() const
{
	return m_prefabs;
}


// inline methords of SceneResInfo::vector3
inline int32 SceneResInfo::vector3::x() const
{
	return m_x;
}

inline int32 SceneResInfo::vector3::y() const
{
	return m_y;
}

inline int32 SceneResInfo::vector3::z() const
{
	return m_z;
}


// inline methords of SceneResInfoManager
inline SceneResInfoManager::SceneResInfoManager()
	: m_array( NULL )
{
}

inline SceneResInfoManager::~SceneResInfoManager()
{
}

inline int SceneResInfoManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* SceneResInfoManager::Source() const
{
	return "scene_res_info.tbl";
}

inline bool SceneResInfoManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const SceneResInfoArray *)data;
	return true;
}

inline bool SceneResInfoManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const SceneResInfoArray *)data;
	return true;
}

inline const SceneResInfo& SceneResInfoManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const SceneResInfo* SceneResInfoManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< SceneResInfo >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
