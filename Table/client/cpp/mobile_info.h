// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: mobile_info.prot

#ifndef _TDL_MOBILE_INFO_H_
#define _TDL_MOBILE_INFO_H_

#include "table_utility.h"

class MobileInfo;
class MobileInfoManager;


// ===================================================================
#pragma pack( 1 )
class MobileInfo
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 2648280891;
	
	uint32 Key() const;
	
	uint32 id() const;
	const char* motype() const;
	uint32 ram() const;
	uint32 quility() const;
	
private:
	uint32 m_id;
	int    m_motype;
	uint32 m_ram;
	uint32 m_quility;
};
#pragma pack()

// -------------------------------------------------------------------
// source: J 机型配置表.xls, sheet: Sheet1
class MobileInfoManager : public Table::Manager, public Singleton< MobileInfoManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const MobileInfo& Get( int index ) const;
	const MobileInfo* Find( const uint32 key ) const;
	
private:
	friend class Singleton< MobileInfoManager >;
	typedef Table::RepeatField< MobileInfoManager, MobileInfo >	MobileInfoArray;
	
	MobileInfoManager();
	~MobileInfoManager();
	
private:
	const MobileInfoArray *m_array;
};


// ===================================================================
// inline methords of MobileInfo
inline uint32 MobileInfo::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 MobileInfo::id() const
{
	return m_id;
}

inline const char* MobileInfo::motype() const
{
	return MobileInfoManager::Instance().String( m_motype );
}

inline uint32 MobileInfo::ram() const
{
	return m_ram;
}

inline uint32 MobileInfo::quility() const
{
	return m_quility;
}


// inline methords of MobileInfoManager
inline MobileInfoManager::MobileInfoManager()
	: m_array( NULL )
{
}

inline MobileInfoManager::~MobileInfoManager()
{
}

inline int MobileInfoManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* MobileInfoManager::Source() const
{
	return "mobile_info.tbl";
}

inline bool MobileInfoManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const MobileInfoArray *)data;
	return true;
}

inline bool MobileInfoManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const MobileInfoArray *)data;
	return true;
}

inline const MobileInfo& MobileInfoManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const MobileInfo* MobileInfoManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< MobileInfo >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
