// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: MagicWeaponLevel.prot

#ifndef _TDL_MAGICWEAPONLEVEL_H_
#define _TDL_MAGICWEAPONLEVEL_H_

#include "table_utility.h"

class MagicWeaponLevel;
class MagicWeaponLevelManager;


// ===================================================================
#pragma pack( 1 )
class MagicWeaponLevel
{
public:
	// nested types ----------------------------------------------------
	typedef Table::RepeatField< MagicWeaponLevelManager, uint32 >	array;
	
	typedef uint32	KeyType;
	
	static const uint32 Version = 1591856823;
	
	uint32 Key() const;
	
	uint32 level() const;
	const array& skills() const;
	
private:
	uint32 m_level;
	array  m_skills;
};
#pragma pack()

// -------------------------------------------------------------------
// source: F 法宝等级表.xls, sheet: Sheet1
class MagicWeaponLevelManager : public Table::Manager, public Singleton< MagicWeaponLevelManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const MagicWeaponLevel& Get( int index ) const;
	const MagicWeaponLevel* Find( const uint32 key ) const;
	
private:
	friend class Singleton< MagicWeaponLevelManager >;
	typedef Table::RepeatField< MagicWeaponLevelManager, MagicWeaponLevel >	MagicWeaponLevelArray;
	
	MagicWeaponLevelManager();
	~MagicWeaponLevelManager();
	
private:
	const MagicWeaponLevelArray *m_array;
};


// ===================================================================
// inline methords of MagicWeaponLevel
inline uint32 MagicWeaponLevel::Key() const
{
	return Combiner< uint32 >::Combine( m_level );
}

inline uint32 MagicWeaponLevel::level() const
{
	return m_level;
}

inline const MagicWeaponLevel::array& MagicWeaponLevel::skills() const
{
	return m_skills;
}


// inline methords of MagicWeaponLevelManager
inline MagicWeaponLevelManager::MagicWeaponLevelManager()
	: m_array( NULL )
{
}

inline MagicWeaponLevelManager::~MagicWeaponLevelManager()
{
}

inline int MagicWeaponLevelManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* MagicWeaponLevelManager::Source() const
{
	return "magicweaponlevel.tbl";
}

inline bool MagicWeaponLevelManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const MagicWeaponLevelArray *)data;
	return true;
}

inline bool MagicWeaponLevelManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const MagicWeaponLevelArray *)data;
	return true;
}

inline const MagicWeaponLevel& MagicWeaponLevelManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const MagicWeaponLevel* MagicWeaponLevelManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< MagicWeaponLevel >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
