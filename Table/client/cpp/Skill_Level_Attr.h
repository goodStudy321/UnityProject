// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: Skill_Level_Attr.prot

#ifndef _TDL_SKILL_LEVEL_ATTR_H_
#define _TDL_SKILL_LEVEL_ATTR_H_

#include "table_utility.h"

class SkillLevelAttr;
class SkillLevelAttrManager;


// ===================================================================
#pragma pack( 1 )
class SkillLevelAttr
{
public:
	// nested types ----------------------------------------------------
	typedef Table::RepeatField< SkillLevelAttrManager, uint32 >	passive_buff;
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< SkillLevelAttrManager, uint32 >	direct_buf;
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< SkillLevelAttrManager, uint32 >	hit_buf;
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< SkillLevelAttrManager, uint32 >	self_buf;
	
	// -------------------------------------------------------------------
	class consume_item
	{
	public:
		uint8 item_id() const;
		uint32 item_num() const;
		
	private:
		uint8  m_item_id;
		uint32 m_item_num;
	};
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< SkillLevelAttrManager, consume_item >	consume_items;
	
	typedef uint32	KeyType;
	
	static const uint32 Version = 513308892;
	
	uint32 Key() const;
	
	uint32 level_skill_id() const;
	uint32 baseid() const;
	uint8 level() const;
	const char* name() const;
	uint8 type() const;
	uint32 action_id() const;
	uint8 skill_ui_index() const;
	uint8 target_type() const;
	uint8 passtive_tri_condit() const;
	uint32 condit_param() const;
	const passive_buff& passive_buff() const;
	const self_buf& self_buff() const;
	const direct_buf& direct_buff() const;
	const hit_buf& hit_buff() const;
	const consume_items& level_up_consume() const;
	uint16 user() const;
	uint32 skill_cd() const;
	uint16 max_distance() const;
	
private:
	uint32        m_level_skill_id;
	uint32        m_baseid;
	uint8         m_level;
	int           m_name;
	uint8         m_type;
	uint32        m_action_id;
	uint8         m_skill_ui_index;
	uint8         m_target_type;
	uint8         m_passtive_tri_condit;
	uint32        m_condit_param;
	passive_buff  m_passive_buff;
	self_buf      m_self_buff;
	direct_buf    m_direct_buff;
	hit_buf       m_hit_buff;
	consume_items m_level_up_consume;
	uint16        m_user;
	uint32        m_skill_cd;
	uint16        m_max_distance;
};
#pragma pack()

// -------------------------------------------------------------------
// source: J 技能等级配置表.xls, sheet: Sheet1
class SkillLevelAttrManager : public Table::Manager, public Singleton< SkillLevelAttrManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const SkillLevelAttr& Get( int index ) const;
	const SkillLevelAttr* Find( const uint32 key ) const;
	
private:
	friend class Singleton< SkillLevelAttrManager >;
	typedef Table::RepeatField< SkillLevelAttrManager, SkillLevelAttr >	SkillLevelAttrArray;
	
	SkillLevelAttrManager();
	~SkillLevelAttrManager();
	
private:
	const SkillLevelAttrArray *m_array;
};


// ===================================================================
// inline methords of SkillLevelAttr
inline uint32 SkillLevelAttr::Key() const
{
	return Combiner< uint32 >::Combine( m_level_skill_id );
}

inline uint32 SkillLevelAttr::level_skill_id() const
{
	return m_level_skill_id;
}

inline uint32 SkillLevelAttr::baseid() const
{
	return m_baseid;
}

inline uint8 SkillLevelAttr::level() const
{
	return m_level;
}

inline const char* SkillLevelAttr::name() const
{
	return SkillLevelAttrManager::Instance().String( m_name );
}

inline uint8 SkillLevelAttr::type() const
{
	return m_type;
}

inline uint32 SkillLevelAttr::action_id() const
{
	return m_action_id;
}

inline uint8 SkillLevelAttr::skill_ui_index() const
{
	return m_skill_ui_index;
}

inline uint8 SkillLevelAttr::target_type() const
{
	return m_target_type;
}

inline uint8 SkillLevelAttr::passtive_tri_condit() const
{
	return m_passtive_tri_condit;
}

inline uint32 SkillLevelAttr::condit_param() const
{
	return m_condit_param;
}

inline const SkillLevelAttr::passive_buff& SkillLevelAttr::passive_buff() const
{
	return m_passive_buff;
}

inline const SkillLevelAttr::self_buf& SkillLevelAttr::self_buff() const
{
	return m_self_buff;
}

inline const SkillLevelAttr::direct_buf& SkillLevelAttr::direct_buff() const
{
	return m_direct_buff;
}

inline const SkillLevelAttr::hit_buf& SkillLevelAttr::hit_buff() const
{
	return m_hit_buff;
}

inline const SkillLevelAttr::consume_items& SkillLevelAttr::level_up_consume() const
{
	return m_level_up_consume;
}

inline uint16 SkillLevelAttr::user() const
{
	return m_user;
}

inline uint32 SkillLevelAttr::skill_cd() const
{
	return m_skill_cd;
}

inline uint16 SkillLevelAttr::max_distance() const
{
	return m_max_distance;
}


// inline methords of SkillLevelAttr::consume_item
inline uint8 SkillLevelAttr::consume_item::item_id() const
{
	return m_item_id;
}

inline uint32 SkillLevelAttr::consume_item::item_num() const
{
	return m_item_num;
}


// inline methords of SkillLevelAttrManager
inline SkillLevelAttrManager::SkillLevelAttrManager()
	: m_array( NULL )
{
}

inline SkillLevelAttrManager::~SkillLevelAttrManager()
{
}

inline int SkillLevelAttrManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* SkillLevelAttrManager::Source() const
{
	return "skill_level_attr.tbl";
}

inline bool SkillLevelAttrManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const SkillLevelAttrArray *)data;
	return true;
}

inline bool SkillLevelAttrManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const SkillLevelAttrArray *)data;
	return true;
}

inline const SkillLevelAttr& SkillLevelAttrManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const SkillLevelAttr* SkillLevelAttrManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< SkillLevelAttr >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
