// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: AudioConf.prot

#ifndef _TDL_AUDIOCONF_H_
#define _TDL_AUDIOCONF_H_

#include "table_utility.h"

class AudioConf;
class AudioConfManager;


// ===================================================================
#pragma pack( 1 )
class AudioConf
{
public:
	// nested types ----------------------------------------------------
	typedef uint16	KeyType;
	
	static const uint32 Version = 1352727067;
	
	uint16 Key() const;
	
	uint16 id() const;
	const char* name() const;
	
private:
	uint16 m_id;
	int    m_name;
};
#pragma pack()

// -------------------------------------------------------------------
// source: Y 音效配置表.xls, sheet: Sheet1
class AudioConfManager : public Table::Manager, public Singleton< AudioConfManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const AudioConf& Get( int index ) const;
	const AudioConf* Find( const uint16 key ) const;
	
private:
	friend class Singleton< AudioConfManager >;
	typedef Table::RepeatField< AudioConfManager, AudioConf >	AudioConfArray;
	
	AudioConfManager();
	~AudioConfManager();
	
private:
	const AudioConfArray *m_array;
};


// ===================================================================
// inline methords of AudioConf
inline uint16 AudioConf::Key() const
{
	return Combiner< uint16 >::Combine( m_id );
}

inline uint16 AudioConf::id() const
{
	return m_id;
}

inline const char* AudioConf::name() const
{
	return AudioConfManager::Instance().String( m_name );
}


// inline methords of AudioConfManager
inline AudioConfManager::AudioConfManager()
	: m_array( NULL )
{
}

inline AudioConfManager::~AudioConfManager()
{
}

inline int AudioConfManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* AudioConfManager::Source() const
{
	return "audioconf.tbl";
}

inline bool AudioConfManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const AudioConfArray *)data;
	return true;
}

inline bool AudioConfManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const AudioConfArray *)data;
	return true;
}

inline const AudioConf& AudioConfManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const AudioConf* AudioConfManager::Find( uint16 key ) const
{
	assert( m_array );
	return BinarySerach< AudioConf >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
