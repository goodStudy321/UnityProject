// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: wing_info.prot

#ifndef _TDL_WING_INFO_H_
#define _TDL_WING_INFO_H_

#include "table_utility.h"

class WingInfo;
class WingInfoManager;


// ===================================================================
#pragma pack( 1 )
class WingInfo
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 13890925;
	
	uint32 Key() const;
	
	uint32 baseid() const;
	uint32 type() const;
	const char* name() const;
	uint16 model_id() const;
	uint16 model_id_ui() const;
	uint8 mount_point() const;
	const char* pathicon() const;
	
private:
	uint32 m_baseid;
	uint32 m_type;
	int    m_name;
	uint16 m_model_id;
	uint16 m_model_id_ui;
	uint8  m_mount_point;
	int    m_pathicon;
};
#pragma pack()

// -------------------------------------------------------------------
// source: C 翅膀配置表.xls, sheet: Sheet1
class WingInfoManager : public Table::Manager, public Singleton< WingInfoManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const WingInfo& Get( int index ) const;
	const WingInfo* Find( const uint32 key ) const;
	
private:
	friend class Singleton< WingInfoManager >;
	typedef Table::RepeatField< WingInfoManager, WingInfo >	WingInfoArray;
	
	WingInfoManager();
	~WingInfoManager();
	
private:
	const WingInfoArray *m_array;
};


// ===================================================================
// inline methords of WingInfo
inline uint32 WingInfo::Key() const
{
	return Combiner< uint32 >::Combine( m_baseid );
}

inline uint32 WingInfo::baseid() const
{
	return m_baseid;
}

inline uint32 WingInfo::type() const
{
	return m_type;
}

inline const char* WingInfo::name() const
{
	return WingInfoManager::Instance().String( m_name );
}

inline uint16 WingInfo::model_id() const
{
	return m_model_id;
}

inline uint16 WingInfo::model_id_ui() const
{
	return m_model_id_ui;
}

inline uint8 WingInfo::mount_point() const
{
	return m_mount_point;
}

inline const char* WingInfo::pathicon() const
{
	return WingInfoManager::Instance().String( m_pathicon );
}


// inline methords of WingInfoManager
inline WingInfoManager::WingInfoManager()
	: m_array( NULL )
{
}

inline WingInfoManager::~WingInfoManager()
{
}

inline int WingInfoManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* WingInfoManager::Source() const
{
	return "wing_info.tbl";
}

inline bool WingInfoManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const WingInfoArray *)data;
	return true;
}

inline bool WingInfoManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const WingInfoArray *)data;
	return true;
}

inline const WingInfo& WingInfoManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const WingInfo* WingInfoManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< WingInfo >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
