// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: MagicWeaponInfo.prot

#ifndef _TDL_MAGICWEAPONINFO_H_
#define _TDL_MAGICWEAPONINFO_H_

#include "table_utility.h"

class MagicWeaponInfo;
class MagicWeaponInfoManager;


// ===================================================================
#pragma pack( 1 )
class MagicWeaponInfo
{
public:
	// nested types ----------------------------------------------------
	typedef Table::RepeatField< MagicWeaponInfoManager, uint32 >	array;
	
	typedef uint32	KeyType;
	
	static const uint32 Version = 695226156;
	
	uint32 Key() const;
	
	uint32 id() const;
	const char* name() const;
	uint16 model_id() const;
	uint16 ui_model_id() const;
	uint8 root() const;
	const char* icon_path() const;
	
private:
	uint32 m_id;
	int    m_name;
	uint16 m_model_id;
	uint16 m_ui_model_id;
	uint8  m_root;
	int    m_icon_path;
};
#pragma pack()

// -------------------------------------------------------------------
// source: F 法宝基础表.xls, sheet: Sheet1
class MagicWeaponInfoManager : public Table::Manager, public Singleton< MagicWeaponInfoManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const MagicWeaponInfo& Get( int index ) const;
	const MagicWeaponInfo* Find( const uint32 key ) const;
	
private:
	friend class Singleton< MagicWeaponInfoManager >;
	typedef Table::RepeatField< MagicWeaponInfoManager, MagicWeaponInfo >	MagicWeaponInfoArray;
	
	MagicWeaponInfoManager();
	~MagicWeaponInfoManager();
	
private:
	const MagicWeaponInfoArray *m_array;
};


// ===================================================================
// inline methords of MagicWeaponInfo
inline uint32 MagicWeaponInfo::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 MagicWeaponInfo::id() const
{
	return m_id;
}

inline const char* MagicWeaponInfo::name() const
{
	return MagicWeaponInfoManager::Instance().String( m_name );
}

inline uint16 MagicWeaponInfo::model_id() const
{
	return m_model_id;
}

inline uint16 MagicWeaponInfo::ui_model_id() const
{
	return m_ui_model_id;
}

inline uint8 MagicWeaponInfo::root() const
{
	return m_root;
}

inline const char* MagicWeaponInfo::icon_path() const
{
	return MagicWeaponInfoManager::Instance().String( m_icon_path );
}


// inline methords of MagicWeaponInfoManager
inline MagicWeaponInfoManager::MagicWeaponInfoManager()
	: m_array( NULL )
{
}

inline MagicWeaponInfoManager::~MagicWeaponInfoManager()
{
}

inline int MagicWeaponInfoManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* MagicWeaponInfoManager::Source() const
{
	return "magicweaponinfo.tbl";
}

inline bool MagicWeaponInfoManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const MagicWeaponInfoArray *)data;
	return true;
}

inline bool MagicWeaponInfoManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const MagicWeaponInfoArray *)data;
	return true;
}

inline const MagicWeaponInfo& MagicWeaponInfoManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const MagicWeaponInfo* MagicWeaponInfoManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< MagicWeaponInfo >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
