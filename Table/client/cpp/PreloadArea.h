// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: PreloadArea.prot

#ifndef _TDL_PRELOADAREA_H_
#define _TDL_PRELOADAREA_H_

#include "table_utility.h"

class PreloadArea;
class PreloadAreaManager;


// ===================================================================
#pragma pack( 1 )
class PreloadArea
{
public:
	// nested types ----------------------------------------------------
	typedef Table::RepeatField< PreloadAreaManager, uint32 >	UInts;
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< PreloadAreaManager, Table::String< PreloadAreaManager > >	Strs;
	
	typedef uint32	KeyType;
	
	static const uint32 Version = 1163467679;
	
	uint32 Key() const;
	
	uint32 id() const;
	const UInts& wildids() const;
	const UInts& npcids() const;
	const Strs& ftnames() const;
	
private:
	uint32 m_id;
	UInts  m_wildIDs;
	UInts  m_npcIDs;
	Strs   m_ftNames;
};
#pragma pack()

// -------------------------------------------------------------------
// source: Q 区域预加载.xls, sheet: Sheet1
class PreloadAreaManager : public Table::Manager, public Singleton< PreloadAreaManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const PreloadArea& Get( int index ) const;
	const PreloadArea* Find( const uint32 key ) const;
	
private:
	friend class Singleton< PreloadAreaManager >;
	typedef Table::RepeatField< PreloadAreaManager, PreloadArea >	PreloadAreaArray;
	
	PreloadAreaManager();
	~PreloadAreaManager();
	
private:
	const PreloadAreaArray *m_array;
};


// ===================================================================
// inline methords of PreloadArea
inline uint32 PreloadArea::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 PreloadArea::id() const
{
	return m_id;
}

inline const PreloadArea::UInts& PreloadArea::wildids() const
{
	return m_wildIDs;
}

inline const PreloadArea::UInts& PreloadArea::npcids() const
{
	return m_npcIDs;
}

inline const PreloadArea::Strs& PreloadArea::ftnames() const
{
	return m_ftNames;
}


// inline methords of PreloadAreaManager
inline PreloadAreaManager::PreloadAreaManager()
	: m_array( NULL )
{
}

inline PreloadAreaManager::~PreloadAreaManager()
{
}

inline int PreloadAreaManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* PreloadAreaManager::Source() const
{
	return "preloadarea.tbl";
}

inline bool PreloadAreaManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const PreloadAreaArray *)data;
	return true;
}

inline bool PreloadAreaManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const PreloadAreaArray *)data;
	return true;
}

inline const PreloadArea& PreloadAreaManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const PreloadArea* PreloadAreaManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< PreloadArea >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
