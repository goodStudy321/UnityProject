// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: InitDesCfg.prot

#ifndef _TDL_INITDESCFG_H_
#define _TDL_INITDESCFG_H_

#include "table_utility.h"

class InitDesCfg;
class InitDesCfgManager;


// ===================================================================
#pragma pack( 1 )
class InitDesCfg
{
public:
	// nested types ----------------------------------------------------
	typedef uint16	KeyType;
	
	static const uint32 Version = 1679255978;
	
	uint16 Key() const;
	
	uint16 id() const;
	const char* title() const;
	const char* des() const;
	
private:
	uint16 m_id;
	int    m_title;
	int    m_des;
};
#pragma pack()

// -------------------------------------------------------------------
// source: C 初始加载游戏文本.xls, sheet: Sheet1
class InitDesCfgManager : public Table::Manager, public Singleton< InitDesCfgManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const InitDesCfg& Get( int index ) const;
	const InitDesCfg* Find( const uint16 key ) const;
	
private:
	friend class Singleton< InitDesCfgManager >;
	typedef Table::RepeatField< InitDesCfgManager, InitDesCfg >	InitDesCfgArray;
	
	InitDesCfgManager();
	~InitDesCfgManager();
	
private:
	const InitDesCfgArray *m_array;
};


// ===================================================================
// inline methords of InitDesCfg
inline uint16 InitDesCfg::Key() const
{
	return Combiner< uint16 >::Combine( m_id );
}

inline uint16 InitDesCfg::id() const
{
	return m_id;
}

inline const char* InitDesCfg::title() const
{
	return InitDesCfgManager::Instance().String( m_title );
}

inline const char* InitDesCfg::des() const
{
	return InitDesCfgManager::Instance().String( m_des );
}


// inline methords of InitDesCfgManager
inline InitDesCfgManager::InitDesCfgManager()
	: m_array( NULL )
{
}

inline InitDesCfgManager::~InitDesCfgManager()
{
}

inline int InitDesCfgManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* InitDesCfgManager::Source() const
{
	return "initdescfg.tbl";
}

inline bool InitDesCfgManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const InitDesCfgArray *)data;
	return true;
}

inline bool InitDesCfgManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const InitDesCfgArray *)data;
	return true;
}

inline const InitDesCfg& InitDesCfgManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const InitDesCfg* InitDesCfgManager::Find( uint16 key ) const
{
	assert( m_array );
	return BinarySerach< InitDesCfg >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
