// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: domainCfg.prot

#ifndef _TDL_DOMAINCFG_H_
#define _TDL_DOMAINCFG_H_

#include "table_utility.h"

class DomainCfg;
class DomainCfgManager;


// ===================================================================
#pragma pack( 1 )
class DomainCfg
{
public:
	// nested types ----------------------------------------------------
	typedef uint16	KeyType;
	
	static const uint32 Version = 2616352553;
	
	uint16 Key() const;
	
	uint16 id() const;
	const char* inter() const;
	const char* exter() const;
	const char* extertest() const;
	
private:
	uint16 m_id;
	int    m_inter;
	int    m_exter;
	int    m_exterTest;
};
#pragma pack()

// -------------------------------------------------------------------
// source: Y 域名配置.xls, sheet: Sheet1
class DomainCfgManager : public Table::Manager, public Singleton< DomainCfgManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const DomainCfg& Get( int index ) const;
	const DomainCfg* Find( const uint16 key ) const;
	
private:
	friend class Singleton< DomainCfgManager >;
	typedef Table::RepeatField< DomainCfgManager, DomainCfg >	DomainCfgArray;
	
	DomainCfgManager();
	~DomainCfgManager();
	
private:
	const DomainCfgArray *m_array;
};


// ===================================================================
// inline methords of DomainCfg
inline uint16 DomainCfg::Key() const
{
	return Combiner< uint16 >::Combine( m_id );
}

inline uint16 DomainCfg::id() const
{
	return m_id;
}

inline const char* DomainCfg::inter() const
{
	return DomainCfgManager::Instance().String( m_inter );
}

inline const char* DomainCfg::exter() const
{
	return DomainCfgManager::Instance().String( m_exter );
}

inline const char* DomainCfg::extertest() const
{
	return DomainCfgManager::Instance().String( m_exterTest );
}


// inline methords of DomainCfgManager
inline DomainCfgManager::DomainCfgManager()
	: m_array( NULL )
{
}

inline DomainCfgManager::~DomainCfgManager()
{
}

inline int DomainCfgManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* DomainCfgManager::Source() const
{
	return "domaincfg.tbl";
}

inline bool DomainCfgManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const DomainCfgArray *)data;
	return true;
}

inline bool DomainCfgManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const DomainCfgArray *)data;
	return true;
}

inline const DomainCfg& DomainCfgManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const DomainCfg* DomainCfgManager::Find( uint16 key ) const
{
	assert( m_array );
	return BinarySerach< DomainCfg >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
