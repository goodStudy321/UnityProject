// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: MissionCameraInfo.prot

#ifndef _TDL_MISSIONCAMERAINFO_H_
#define _TDL_MISSIONCAMERAINFO_H_

#include "table_utility.h"

class MissionCameraInfo;
class MissionCameraInfoManager;


// ===================================================================
#pragma pack( 1 )
class MissionCameraInfo
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 4140575921;
	
	uint32 Key() const;
	
	uint32 index() const;
	uint32 miss_id() const;
	uint32 scene_id() const;
	uint32 camera_id() const;
	uint32 time() const;
	
private:
	uint32 m_index;
	uint32 m_miss_id;
	uint32 m_scene_id;
	uint32 m_camera_id;
	uint32 m_time;
};
#pragma pack()

// -------------------------------------------------------------------
// source: R 任务相机关联表.xls, sheet: Sheet1
class MissionCameraInfoManager : public Table::Manager, public Singleton< MissionCameraInfoManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const MissionCameraInfo& Get( int index ) const;
	const MissionCameraInfo* Find( const uint32 key ) const;
	
private:
	friend class Singleton< MissionCameraInfoManager >;
	typedef Table::RepeatField< MissionCameraInfoManager, MissionCameraInfo >	MissionCameraInfoArray;
	
	MissionCameraInfoManager();
	~MissionCameraInfoManager();
	
private:
	const MissionCameraInfoArray *m_array;
};


// ===================================================================
// inline methords of MissionCameraInfo
inline uint32 MissionCameraInfo::Key() const
{
	return Combiner< uint32 >::Combine( m_index );
}

inline uint32 MissionCameraInfo::index() const
{
	return m_index;
}

inline uint32 MissionCameraInfo::miss_id() const
{
	return m_miss_id;
}

inline uint32 MissionCameraInfo::scene_id() const
{
	return m_scene_id;
}

inline uint32 MissionCameraInfo::camera_id() const
{
	return m_camera_id;
}

inline uint32 MissionCameraInfo::time() const
{
	return m_time;
}


// inline methords of MissionCameraInfoManager
inline MissionCameraInfoManager::MissionCameraInfoManager()
	: m_array( NULL )
{
}

inline MissionCameraInfoManager::~MissionCameraInfoManager()
{
}

inline int MissionCameraInfoManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* MissionCameraInfoManager::Source() const
{
	return "missioncamerainfo.tbl";
}

inline bool MissionCameraInfoManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const MissionCameraInfoArray *)data;
	return true;
}

inline bool MissionCameraInfoManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const MissionCameraInfoArray *)data;
	return true;
}

inline const MissionCameraInfo& MissionCameraInfoManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const MissionCameraInfo* MissionCameraInfoManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< MissionCameraInfo >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
