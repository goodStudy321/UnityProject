// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: mission_info.prot

#ifndef _TDL_MISSION_INFO_H_
#define _TDL_MISSION_INFO_H_

#include "table_utility.h"

class MissionInfo;
class MissionInfoManager;


// ===================================================================
#pragma pack( 1 )
class MissionInfo
{
public:
	// nested types ----------------------------------------------------
	typedef Table::RepeatField< MissionInfoManager, int32 >	data;
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< MissionInfoManager, data >	param;
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< MissionInfoManager, data >	reward;
	
	typedef uint32	KeyType;
	
	static const uint32 Version = 2882205836;
	
	uint32 Key() const;
	
	uint32 id() const;
	const char* name() const;
	uint16 chapter() const;
	uint8 type() const;
	const data& three_id() const;
	uint8 quality() const;
	uint8 num() const;
	uint8 turn() const;
	const char* chapter_name() const;
	const char* chapter_des() const;
	uint32 first_id() const;
	uint32 next_id() const;
	uint8 need_lv() const;
	uint8 auto_receive() const;
	uint8 auto_submit() const;
	uint8 show_talk() const;
	uint32 npc_receive() const;
	uint32 npc_submit() const;
	const char* talk_resceive() const;
	const char* mission_talk() const;
	const char* talk_submit() const;
	const data& auto_point() const;
	const data& hide_monster() const;
	uint8 target() const;
	const param& target_param() const;
	const char* custom_text() const;
	int32 exp_reward() const;
	const reward& item_reward() const;
	int32 quite_scene_id() const;
	int32 scene_change() const;
	
private:
	uint32 m_id;
	int    m_name;
	uint16 m_chapter;
	uint8  m_type;
	data   m_three_id;
	uint8  m_quality;
	uint8  m_num;
	uint8  m_turn;
	int    m_chapter_name;
	int    m_chapter_des;
	uint32 m_first_id;
	uint32 m_next_id;
	uint8  m_need_lv;
	uint8  m_auto_receive;
	uint8  m_auto_submit;
	uint8  m_show_talk;
	uint32 m_npc_receive;
	uint32 m_npc_submit;
	int    m_talk_resceive;
	int    m_mission_talk;
	int    m_talk_submit;
	data   m_auto_point;
	data   m_hide_monster;
	uint8  m_target;
	param  m_target_param;
	int    m_custom_text;
	int32  m_exp_reward;
	reward m_item_reward;
	int32  m_quite_scene_id;
	int32  m_scene_change;
};
#pragma pack()

// -------------------------------------------------------------------
// source: R 任务配置.xls, sheet: Sheet1
class MissionInfoManager : public Table::Manager, public Singleton< MissionInfoManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const MissionInfo& Get( int index ) const;
	const MissionInfo* Find( const uint32 key ) const;
	
private:
	friend class Singleton< MissionInfoManager >;
	typedef Table::RepeatField< MissionInfoManager, MissionInfo >	MissionInfoArray;
	
	MissionInfoManager();
	~MissionInfoManager();
	
private:
	const MissionInfoArray *m_array;
};


// ===================================================================
// inline methords of MissionInfo
inline uint32 MissionInfo::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 MissionInfo::id() const
{
	return m_id;
}

inline const char* MissionInfo::name() const
{
	return MissionInfoManager::Instance().String( m_name );
}

inline uint16 MissionInfo::chapter() const
{
	return m_chapter;
}

inline uint8 MissionInfo::type() const
{
	return m_type;
}

inline const MissionInfo::data& MissionInfo::three_id() const
{
	return m_three_id;
}

inline uint8 MissionInfo::quality() const
{
	return m_quality;
}

inline uint8 MissionInfo::num() const
{
	return m_num;
}

inline uint8 MissionInfo::turn() const
{
	return m_turn;
}

inline const char* MissionInfo::chapter_name() const
{
	return MissionInfoManager::Instance().String( m_chapter_name );
}

inline const char* MissionInfo::chapter_des() const
{
	return MissionInfoManager::Instance().String( m_chapter_des );
}

inline uint32 MissionInfo::first_id() const
{
	return m_first_id;
}

inline uint32 MissionInfo::next_id() const
{
	return m_next_id;
}

inline uint8 MissionInfo::need_lv() const
{
	return m_need_lv;
}

inline uint8 MissionInfo::auto_receive() const
{
	return m_auto_receive;
}

inline uint8 MissionInfo::auto_submit() const
{
	return m_auto_submit;
}

inline uint8 MissionInfo::show_talk() const
{
	return m_show_talk;
}

inline uint32 MissionInfo::npc_receive() const
{
	return m_npc_receive;
}

inline uint32 MissionInfo::npc_submit() const
{
	return m_npc_submit;
}

inline const char* MissionInfo::talk_resceive() const
{
	return MissionInfoManager::Instance().String( m_talk_resceive );
}

inline const char* MissionInfo::mission_talk() const
{
	return MissionInfoManager::Instance().String( m_mission_talk );
}

inline const char* MissionInfo::talk_submit() const
{
	return MissionInfoManager::Instance().String( m_talk_submit );
}

inline const MissionInfo::data& MissionInfo::auto_point() const
{
	return m_auto_point;
}

inline const MissionInfo::data& MissionInfo::hide_monster() const
{
	return m_hide_monster;
}

inline uint8 MissionInfo::target() const
{
	return m_target;
}

inline const MissionInfo::param& MissionInfo::target_param() const
{
	return m_target_param;
}

inline const char* MissionInfo::custom_text() const
{
	return MissionInfoManager::Instance().String( m_custom_text );
}

inline int32 MissionInfo::exp_reward() const
{
	return m_exp_reward;
}

inline const MissionInfo::reward& MissionInfo::item_reward() const
{
	return m_item_reward;
}

inline int32 MissionInfo::quite_scene_id() const
{
	return m_quite_scene_id;
}

inline int32 MissionInfo::scene_change() const
{
	return m_scene_change;
}


// inline methords of MissionInfoManager
inline MissionInfoManager::MissionInfoManager()
	: m_array( NULL )
{
}

inline MissionInfoManager::~MissionInfoManager()
{
}

inline int MissionInfoManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* MissionInfoManager::Source() const
{
	return "mission_info.tbl";
}

inline bool MissionInfoManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const MissionInfoArray *)data;
	return true;
}

inline bool MissionInfoManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const MissionInfoArray *)data;
	return true;
}

inline const MissionInfo& MissionInfoManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const MissionInfo* MissionInfoManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< MissionInfo >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
