// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: PetLevelPro.prot

#ifndef _TDL_PETLEVELPRO_H_
#define _TDL_PETLEVELPRO_H_

#include "table_utility.h"

class PetLevelPro;
class PetLevelProManager;


// ===================================================================
#pragma pack( 1 )
class PetLevelPro
{
public:
	// nested types ----------------------------------------------------
	typedef uint16	KeyType;
	
	static const uint32 Version = 1785850037;
	
	uint16 Key() const;
	
	uint16 level() const;
	uint32 cost_exp() const;
	uint32 att() const;
	uint32 arp() const;
	uint32 crit() const;
	uint32 ignore_def() const;
	
private:
	uint16 m_level;
	uint32 m_cost_exp;
	uint32 m_att;
	uint32 m_arp;
	uint32 m_crit;
	uint32 m_Ignore_def;
};
#pragma pack()

// -------------------------------------------------------------------
// source: C 宠物等级配置表.xls, sheet: Sheet1
class PetLevelProManager : public Table::Manager, public Singleton< PetLevelProManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const PetLevelPro& Get( int index ) const;
	const PetLevelPro* Find( const uint16 key ) const;
	
private:
	friend class Singleton< PetLevelProManager >;
	typedef Table::RepeatField< PetLevelProManager, PetLevelPro >	PetLevelProArray;
	
	PetLevelProManager();
	~PetLevelProManager();
	
private:
	const PetLevelProArray *m_array;
};


// ===================================================================
// inline methords of PetLevelPro
inline uint16 PetLevelPro::Key() const
{
	return Combiner< uint16 >::Combine( m_level );
}

inline uint16 PetLevelPro::level() const
{
	return m_level;
}

inline uint32 PetLevelPro::cost_exp() const
{
	return m_cost_exp;
}

inline uint32 PetLevelPro::att() const
{
	return m_att;
}

inline uint32 PetLevelPro::arp() const
{
	return m_arp;
}

inline uint32 PetLevelPro::crit() const
{
	return m_crit;
}

inline uint32 PetLevelPro::ignore_def() const
{
	return m_Ignore_def;
}


// inline methords of PetLevelProManager
inline PetLevelProManager::PetLevelProManager()
	: m_array( NULL )
{
}

inline PetLevelProManager::~PetLevelProManager()
{
}

inline int PetLevelProManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* PetLevelProManager::Source() const
{
	return "petlevelpro.tbl";
}

inline bool PetLevelProManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const PetLevelProArray *)data;
	return true;
}

inline bool PetLevelProManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const PetLevelProArray *)data;
	return true;
}

inline const PetLevelPro& PetLevelProManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const PetLevelPro* PetLevelProManager::Find( uint16 key ) const
{
	assert( m_array );
	return BinarySerach< PetLevelPro >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
