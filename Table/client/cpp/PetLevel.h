// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: PetLevel.prot

#ifndef _TDL_PETLEVEL_H_
#define _TDL_PETLEVEL_H_

#include "table_utility.h"

class PetLevel;
class PetLevelManager;


// ===================================================================
#pragma pack( 1 )
class PetLevel
{
public:
	// nested types ----------------------------------------------------
	typedef uint16	KeyType;
	
	static const uint32 Version = 1785850037;
	
	uint16 Key() const;
	
	uint16 level() const;
	uint32 cost_exp() const;
	uint32 att() const;
	uint32 arm() const;
	uint32 hp() const;
	uint32 def() const;
	
private:
	uint16 m_level;
	uint32 m_cost_exp;
	uint32 m_att;
	uint32 m_arm;
	uint32 m_hp;
	uint32 m_def;
};
#pragma pack()

// -------------------------------------------------------------------
// source: C 宠物等级配置表.xls, sheet: Sheet1
class PetLevelManager : public Table::Manager, public Singleton< PetLevelManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const PetLevel& Get( int index ) const;
	const PetLevel* Find( const uint16 key ) const;
	
private:
	friend class Singleton< PetLevelManager >;
	typedef Table::RepeatField< PetLevelManager, PetLevel >	PetLevelArray;
	
	PetLevelManager();
	~PetLevelManager();
	
private:
	const PetLevelArray *m_array;
};


// ===================================================================
// inline methords of PetLevel
inline uint16 PetLevel::Key() const
{
	return Combiner< uint16 >::Combine( m_level );
}

inline uint16 PetLevel::level() const
{
	return m_level;
}

inline uint32 PetLevel::cost_exp() const
{
	return m_cost_exp;
}

inline uint32 PetLevel::att() const
{
	return m_att;
}

inline uint32 PetLevel::arm() const
{
	return m_arm;
}

inline uint32 PetLevel::hp() const
{
	return m_hp;
}

inline uint32 PetLevel::def() const
{
	return m_def;
}


// inline methords of PetLevelManager
inline PetLevelManager::PetLevelManager()
	: m_array( NULL )
{
}

inline PetLevelManager::~PetLevelManager()
{
}

inline int PetLevelManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* PetLevelManager::Source() const
{
	return "petlevel.tbl";
}

inline bool PetLevelManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const PetLevelArray *)data;
	return true;
}

inline bool PetLevelManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const PetLevelArray *)data;
	return true;
}

inline const PetLevel& PetLevelManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const PetLevel* PetLevelManager::Find( uint16 key ) const
{
	assert( m_array );
	return BinarySerach< PetLevel >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
