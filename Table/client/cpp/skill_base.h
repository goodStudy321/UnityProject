// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: skill_base.prot

#ifndef _TDL_SKILL_BASE_H_
#define _TDL_SKILL_BASE_H_

#include "table_utility.h"

class SkillBase;
class SkillBaseManager;


// ===================================================================
#pragma pack( 1 )
class SkillBase
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 3108388122;
	
	uint32 Key() const;
	
	uint32 baseid() const;
	const char* name() const;
	const char* name_suffix() const;
	uint16 lv_max() const;
	const char* pathicon() const;
	
private:
	uint32 m_baseid;
	int    m_name;
	int    m_name_suffix;
	uint16 m_lv_max;
	int    m_pathicon;
};
#pragma pack()

// -------------------------------------------------------------------
// source: J 技能等级配置表.xls, sheet: Sheet2
class SkillBaseManager : public Table::Manager, public Singleton< SkillBaseManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const SkillBase& Get( int index ) const;
	const SkillBase* Find( const uint32 key ) const;
	
private:
	friend class Singleton< SkillBaseManager >;
	typedef Table::RepeatField< SkillBaseManager, SkillBase >	SkillBaseArray;
	
	SkillBaseManager();
	~SkillBaseManager();
	
private:
	const SkillBaseArray *m_array;
};


// ===================================================================
// inline methords of SkillBase
inline uint32 SkillBase::Key() const
{
	return Combiner< uint32 >::Combine( m_baseid );
}

inline uint32 SkillBase::baseid() const
{
	return m_baseid;
}

inline const char* SkillBase::name() const
{
	return SkillBaseManager::Instance().String( m_name );
}

inline const char* SkillBase::name_suffix() const
{
	return SkillBaseManager::Instance().String( m_name_suffix );
}

inline uint16 SkillBase::lv_max() const
{
	return m_lv_max;
}

inline const char* SkillBase::pathicon() const
{
	return SkillBaseManager::Instance().String( m_pathicon );
}


// inline methords of SkillBaseManager
inline SkillBaseManager::SkillBaseManager()
	: m_array( NULL )
{
}

inline SkillBaseManager::~SkillBaseManager()
{
}

inline int SkillBaseManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* SkillBaseManager::Source() const
{
	return "skill_base.tbl";
}

inline bool SkillBaseManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const SkillBaseArray *)data;
	return true;
}

inline bool SkillBaseManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const SkillBaseArray *)data;
	return true;
}

inline const SkillBase& SkillBaseManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const SkillBase* SkillBaseManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< SkillBase >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
