// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: drop_temp.prot

#ifndef _TDL_DROP_TEMP_H_
#define _TDL_DROP_TEMP_H_

#include "table_utility.h"

class DropTemp;
class DropTempManager;


// ===================================================================
#pragma pack( 1 )
class DropTemp
{
public:
	// nested types ----------------------------------------------------
	class drops
	{
	public:
		uint32 k() const;
		uint32 v() const;
		uint32 b() const;
		
	private:
		uint32 m_k;
		uint32 m_v;
		uint32 m_b;
	};
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< DropTempManager, drops >	dropList;
	
	typedef uint32	KeyType;
	
	static const uint32 Version = 3695782657;
	
	uint32 Key() const;
	
	uint32 id() const;
	const dropList& drop_lists1() const;
	const dropList& drop_lists2() const;
	const dropList& drop_lists3() const;
	const dropList& drop_lists4() const;
	const dropList& drop_lists5() const;
	const dropList& drop_lists6() const;
	
private:
	uint32   m_id;
	dropList m_drop_lists1;
	dropList m_drop_lists2;
	dropList m_drop_lists3;
	dropList m_drop_lists4;
	dropList m_drop_lists5;
	dropList m_drop_lists6;
};
#pragma pack()

// -------------------------------------------------------------------
// source: D 掉落表.xls, sheet: Sheet1
class DropTempManager : public Table::Manager, public Singleton< DropTempManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const DropTemp& Get( int index ) const;
	const DropTemp* Find( const uint32 key ) const;
	
private:
	friend class Singleton< DropTempManager >;
	typedef Table::RepeatField< DropTempManager, DropTemp >	DropTempArray;
	
	DropTempManager();
	~DropTempManager();
	
private:
	const DropTempArray *m_array;
};


// ===================================================================
// inline methords of DropTemp
inline uint32 DropTemp::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 DropTemp::id() const
{
	return m_id;
}

inline const DropTemp::dropList& DropTemp::drop_lists1() const
{
	return m_drop_lists1;
}

inline const DropTemp::dropList& DropTemp::drop_lists2() const
{
	return m_drop_lists2;
}

inline const DropTemp::dropList& DropTemp::drop_lists3() const
{
	return m_drop_lists3;
}

inline const DropTemp::dropList& DropTemp::drop_lists4() const
{
	return m_drop_lists4;
}

inline const DropTemp::dropList& DropTemp::drop_lists5() const
{
	return m_drop_lists5;
}

inline const DropTemp::dropList& DropTemp::drop_lists6() const
{
	return m_drop_lists6;
}


// inline methords of DropTemp::drops
inline uint32 DropTemp::drops::k() const
{
	return m_k;
}

inline uint32 DropTemp::drops::v() const
{
	return m_v;
}

inline uint32 DropTemp::drops::b() const
{
	return m_b;
}


// inline methords of DropTempManager
inline DropTempManager::DropTempManager()
	: m_array( NULL )
{
}

inline DropTempManager::~DropTempManager()
{
}

inline int DropTempManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* DropTempManager::Source() const
{
	return "drop_temp.tbl";
}

inline bool DropTempManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const DropTempArray *)data;
	return true;
}

inline bool DropTempManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const DropTempArray *)data;
	return true;
}

inline const DropTemp& DropTempManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const DropTemp* DropTempManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< DropTemp >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
