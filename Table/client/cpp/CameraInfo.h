// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: CameraInfo.prot

#ifndef _TDL_CAMERAINFO_H_
#define _TDL_CAMERAINFO_H_

#include "table_utility.h"

class CameraInfo;
class CameraInfoManager;


// ===================================================================
#pragma pack( 1 )
class CameraInfo
{
public:
	// nested types ----------------------------------------------------
	class vector3
	{
	public:
		int32 x() const;
		int32 y() const;
		int32 z() const;
		
	private:
		int32 m_x;
		int32 m_y;
		int32 m_z;
	};
	
	// -------------------------------------------------------------------
	class color
	{
	public:
		int32 x() const;
		int32 y() const;
		int32 z() const;
		
	private:
		int32 m_x;
		int32 m_y;
		int32 m_z;
	};
	
	// -------------------------------------------------------------------
	class fastMobileBloom
	{
	public:
		uint8 enabled() const;
		double threshold() const;
		double intensity() const;
		double blur_size() const;
		uint8 blur_iterations() const;
		
	private:
		uint8  m_enabled;
		double m_threshold;
		double m_intensity;
		double m_blur_size;
		uint8  m_blur_iterations;
	};
	
	// -------------------------------------------------------------------
	class amplifyColorEffect
	{
	public:
		uint8 enabled() const;
		double blend_amount() const;
		const char* lut_texture() const;
		const char* lut_blend_texture() const;
		
	private:
		uint8  m_enabled;
		double m_blend_amount;
		int    m_lut_texture;
		int    m_lut_blend_texture;
	};
	
	// -------------------------------------------------------------------
	class dynamicFog
	{
	public:
		uint8 enabled() const;
		uint8 effect_type() const;
		double alpha() const;
		double noise_strength() const;
		double distance() const;
		double distance_fall_off() const;
		double max_distance() const;
		double max_distance_fall_off() const;
		double height() const;
		double height_fall_off() const;
		double baseline_height() const;
		double clip_under_baseline() const;
		uint8 turbulence() const;
		double speed() const;
		const color& color() const;
		const color& color_ii() const;
		
	private:
		uint8  m_enabled;
		uint8  m_effect_type;
		double m_alpha;
		double m_noise_strength;
		double m_distance;
		double m_distance_fall_off;
		double m_max_distance;
		double m_max_distance_fall_off;
		double m_height;
		double m_height_fall_off;
		double m_baseline_height;
		double m_clip_under_baseline;
		uint8  m_turbulence;
		double m_speed;
		color  m_color;
		color  m_color_II;
	};
	
	// -------------------------------------------------------------------
	class amplifyBloomEffect
	{
	public:
		uint8 technique() const;
		uint8 sourcedownscale() const;
		uint8 precision() const;
		double range() const;
		double intensity() const;
		double threshold() const;
		uint8 debug() const;
		uint8 showwarnings() const;
		uint8 mipcount() const;
		uint8 upscaleblurradius() const;
		uint8 featuressourceid() const;
		
	private:
		uint8  m_technique;
		uint8  m_sourceDownscale;
		uint8  m_precision;
		double m_range;
		double m_intensity;
		double m_threshold;
		uint8  m_debug;
		uint8  m_showWarnings;
		uint8  m_mipCount;
		uint8  m_upscaleBlurRadius;
		uint8  m_featuresSourceID;
	};
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< CameraInfoManager, vector3 >	v3s;
	
	typedef uint16	KeyType;
	
	static const uint32 Version = 2056499527;
	
	uint16 Key() const;
	
	uint16 id() const;
	uint8 focus() const;
	uint16 fov() const;
	const v3s& start() const;
	const v3s& euler() const;
	int16 heightmax() const;
	int16 heightmin() const;
	uint8 hslerp() const;
	uint8 ehslerp() const;
	uint8 xzfactor() const;
	uint8 vslerp() const;
	uint8 evslerp() const;
	uint8 vbound() const;
	const fastMobileBloom& fast_mobile_bloom_info() const;
	const amplifyColorEffect& amplify_color_effect_info() const;
	const dynamicFog& dynamic_fog_info() const;
	const amplifyBloomEffect& amplify_bloom_effect_info() const;
	const char* sky_box_material() const;
	const char* scene_mod_name() const;
	uint16 near() const;
	uint16 far() const;
	uint8 type() const;
	
private:
	uint16             m_id;
	uint8              m_focus;
	uint16             m_fov;
	v3s                m_start;
	v3s                m_euler;
	int16              m_heightMax;
	int16              m_heightMin;
	uint8              m_hSlerp;
	uint8              m_ehSlerp;
	uint8              m_xzFactor;
	uint8              m_vSlerp;
	uint8              m_evSlerp;
	uint8              m_vBound;
	fastMobileBloom    m_fast_mobile_bloom_info;
	amplifyColorEffect m_amplify_color_effect_info;
	dynamicFog         m_dynamic_fog_info;
	amplifyBloomEffect m_amplify_bloom_effect_info;
	int                m_sky_box_material;
	int                m_scene_mod_name;
	uint16             m_near;
	uint16             m_far;
	uint8              m_type;
};
#pragma pack()

// -------------------------------------------------------------------
// source: X 相机配置表.xls, sheet: Sheet1
class CameraInfoManager : public Table::Manager, public Singleton< CameraInfoManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const CameraInfo& Get( int index ) const;
	const CameraInfo* Find( const uint16 key ) const;
	
private:
	friend class Singleton< CameraInfoManager >;
	typedef Table::RepeatField< CameraInfoManager, CameraInfo >	CameraInfoArray;
	
	CameraInfoManager();
	~CameraInfoManager();
	
private:
	const CameraInfoArray *m_array;
};


// ===================================================================
// inline methords of CameraInfo
inline uint16 CameraInfo::Key() const
{
	return Combiner< uint16 >::Combine( m_id );
}

inline uint16 CameraInfo::id() const
{
	return m_id;
}

inline uint8 CameraInfo::focus() const
{
	return m_focus;
}

inline uint16 CameraInfo::fov() const
{
	return m_fov;
}

inline const CameraInfo::v3s& CameraInfo::start() const
{
	return m_start;
}

inline const CameraInfo::v3s& CameraInfo::euler() const
{
	return m_euler;
}

inline int16 CameraInfo::heightmax() const
{
	return m_heightMax;
}

inline int16 CameraInfo::heightmin() const
{
	return m_heightMin;
}

inline uint8 CameraInfo::hslerp() const
{
	return m_hSlerp;
}

inline uint8 CameraInfo::ehslerp() const
{
	return m_ehSlerp;
}

inline uint8 CameraInfo::xzfactor() const
{
	return m_xzFactor;
}

inline uint8 CameraInfo::vslerp() const
{
	return m_vSlerp;
}

inline uint8 CameraInfo::evslerp() const
{
	return m_evSlerp;
}

inline uint8 CameraInfo::vbound() const
{
	return m_vBound;
}

inline const CameraInfo::fastMobileBloom& CameraInfo::fast_mobile_bloom_info() const
{
	return m_fast_mobile_bloom_info;
}

inline const CameraInfo::amplifyColorEffect& CameraInfo::amplify_color_effect_info() const
{
	return m_amplify_color_effect_info;
}

inline const CameraInfo::dynamicFog& CameraInfo::dynamic_fog_info() const
{
	return m_dynamic_fog_info;
}

inline const CameraInfo::amplifyBloomEffect& CameraInfo::amplify_bloom_effect_info() const
{
	return m_amplify_bloom_effect_info;
}

inline const char* CameraInfo::sky_box_material() const
{
	return CameraInfoManager::Instance().String( m_sky_box_material );
}

inline const char* CameraInfo::scene_mod_name() const
{
	return CameraInfoManager::Instance().String( m_scene_mod_name );
}

inline uint16 CameraInfo::near() const
{
	return m_near;
}

inline uint16 CameraInfo::far() const
{
	return m_far;
}

inline uint8 CameraInfo::type() const
{
	return m_type;
}


// inline methords of CameraInfo::vector3
inline int32 CameraInfo::vector3::x() const
{
	return m_x;
}

inline int32 CameraInfo::vector3::y() const
{
	return m_y;
}

inline int32 CameraInfo::vector3::z() const
{
	return m_z;
}


// inline methords of CameraInfo::color
inline int32 CameraInfo::color::x() const
{
	return m_x;
}

inline int32 CameraInfo::color::y() const
{
	return m_y;
}

inline int32 CameraInfo::color::z() const
{
	return m_z;
}


// inline methords of CameraInfo::fastMobileBloom
inline uint8 CameraInfo::fastMobileBloom::enabled() const
{
	return m_enabled;
}

inline double CameraInfo::fastMobileBloom::threshold() const
{
	return m_threshold;
}

inline double CameraInfo::fastMobileBloom::intensity() const
{
	return m_intensity;
}

inline double CameraInfo::fastMobileBloom::blur_size() const
{
	return m_blur_size;
}

inline uint8 CameraInfo::fastMobileBloom::blur_iterations() const
{
	return m_blur_iterations;
}


// inline methords of CameraInfo::amplifyColorEffect
inline uint8 CameraInfo::amplifyColorEffect::enabled() const
{
	return m_enabled;
}

inline double CameraInfo::amplifyColorEffect::blend_amount() const
{
	return m_blend_amount;
}

inline const char* CameraInfo::amplifyColorEffect::lut_texture() const
{
	return CameraInfoManager::Instance().String( m_lut_texture );
}

inline const char* CameraInfo::amplifyColorEffect::lut_blend_texture() const
{
	return CameraInfoManager::Instance().String( m_lut_blend_texture );
}


// inline methords of CameraInfo::dynamicFog
inline uint8 CameraInfo::dynamicFog::enabled() const
{
	return m_enabled;
}

inline uint8 CameraInfo::dynamicFog::effect_type() const
{
	return m_effect_type;
}

inline double CameraInfo::dynamicFog::alpha() const
{
	return m_alpha;
}

inline double CameraInfo::dynamicFog::noise_strength() const
{
	return m_noise_strength;
}

inline double CameraInfo::dynamicFog::distance() const
{
	return m_distance;
}

inline double CameraInfo::dynamicFog::distance_fall_off() const
{
	return m_distance_fall_off;
}

inline double CameraInfo::dynamicFog::max_distance() const
{
	return m_max_distance;
}

inline double CameraInfo::dynamicFog::max_distance_fall_off() const
{
	return m_max_distance_fall_off;
}

inline double CameraInfo::dynamicFog::height() const
{
	return m_height;
}

inline double CameraInfo::dynamicFog::height_fall_off() const
{
	return m_height_fall_off;
}

inline double CameraInfo::dynamicFog::baseline_height() const
{
	return m_baseline_height;
}

inline double CameraInfo::dynamicFog::clip_under_baseline() const
{
	return m_clip_under_baseline;
}

inline uint8 CameraInfo::dynamicFog::turbulence() const
{
	return m_turbulence;
}

inline double CameraInfo::dynamicFog::speed() const
{
	return m_speed;
}

inline const CameraInfo::color& CameraInfo::dynamicFog::color() const
{
	return m_color;
}

inline const CameraInfo::color& CameraInfo::dynamicFog::color_ii() const
{
	return m_color_II;
}


// inline methords of CameraInfo::amplifyBloomEffect
inline uint8 CameraInfo::amplifyBloomEffect::technique() const
{
	return m_technique;
}

inline uint8 CameraInfo::amplifyBloomEffect::sourcedownscale() const
{
	return m_sourceDownscale;
}

inline uint8 CameraInfo::amplifyBloomEffect::precision() const
{
	return m_precision;
}

inline double CameraInfo::amplifyBloomEffect::range() const
{
	return m_range;
}

inline double CameraInfo::amplifyBloomEffect::intensity() const
{
	return m_intensity;
}

inline double CameraInfo::amplifyBloomEffect::threshold() const
{
	return m_threshold;
}

inline uint8 CameraInfo::amplifyBloomEffect::debug() const
{
	return m_debug;
}

inline uint8 CameraInfo::amplifyBloomEffect::showwarnings() const
{
	return m_showWarnings;
}

inline uint8 CameraInfo::amplifyBloomEffect::mipcount() const
{
	return m_mipCount;
}

inline uint8 CameraInfo::amplifyBloomEffect::upscaleblurradius() const
{
	return m_upscaleBlurRadius;
}

inline uint8 CameraInfo::amplifyBloomEffect::featuressourceid() const
{
	return m_featuresSourceID;
}


// inline methords of CameraInfoManager
inline CameraInfoManager::CameraInfoManager()
	: m_array( NULL )
{
}

inline CameraInfoManager::~CameraInfoManager()
{
}

inline int CameraInfoManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* CameraInfoManager::Source() const
{
	return "camerainfo.tbl";
}

inline bool CameraInfoManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const CameraInfoArray *)data;
	return true;
}

inline bool CameraInfoManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const CameraInfoArray *)data;
	return true;
}

inline const CameraInfo& CameraInfoManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const CameraInfo* CameraInfoManager::Find( uint16 key ) const
{
	assert( m_array );
	return BinarySerach< CameraInfo >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
