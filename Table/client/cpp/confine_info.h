// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: confine_info.prot

#ifndef _TDL_CONFINE_INFO_H_
#define _TDL_CONFINE_INFO_H_

#include "table_utility.h"

class Confine;
class ConfineManager;


// ===================================================================
#pragma pack( 1 )
class Confine
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 3654768724;
	
	uint32 Key() const;
	
	uint32 confine() const;
	const char* confinestr() const;
	const char* path() const;
	const char* aperturepath() const;
	
private:
	uint32 m_confine;
	int    m_confineStr;
	int    m_path;
	int    m_aperturePath;
};
#pragma pack()

// -------------------------------------------------------------------
// source: J 境界系统.xls, sheet: Sheet1
class ConfineManager : public Table::Manager, public Singleton< ConfineManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const Confine& Get( int index ) const;
	const Confine* Find( const uint32 key ) const;
	
private:
	friend class Singleton< ConfineManager >;
	typedef Table::RepeatField< ConfineManager, Confine >	ConfineArray;
	
	ConfineManager();
	~ConfineManager();
	
private:
	const ConfineArray *m_array;
};


// ===================================================================
// inline methords of Confine
inline uint32 Confine::Key() const
{
	return Combiner< uint32 >::Combine( m_confine );
}

inline uint32 Confine::confine() const
{
	return m_confine;
}

inline const char* Confine::confinestr() const
{
	return ConfineManager::Instance().String( m_confineStr );
}

inline const char* Confine::path() const
{
	return ConfineManager::Instance().String( m_path );
}

inline const char* Confine::aperturepath() const
{
	return ConfineManager::Instance().String( m_aperturePath );
}


// inline methords of ConfineManager
inline ConfineManager::ConfineManager()
	: m_array( NULL )
{
}

inline ConfineManager::~ConfineManager()
{
}

inline int ConfineManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* ConfineManager::Source() const
{
	return "confine_info.tbl";
}

inline bool ConfineManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const ConfineArray *)data;
	return true;
}

inline bool ConfineManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const ConfineArray *)data;
	return true;
}

inline const Confine& ConfineManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const Confine* ConfineManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< Confine >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
