// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: AudioCfg.prot

#ifndef _TDL_AUDIOCFG_H_
#define _TDL_AUDIOCFG_H_

#include "table_utility.h"

class AudioCfg;
class AudioCfgManager;


// ===================================================================
#pragma pack( 1 )
class AudioCfg
{
public:
	// nested types ----------------------------------------------------
	typedef uint16	KeyType;
	
	static const uint32 Version = 1352727067;
	
	uint16 Key() const;
	
	uint16 id() const;
	const char* name() const;
	
private:
	uint16 m_id;
	int    m_name;
};
#pragma pack()

// -------------------------------------------------------------------
// source: Y 音效配置表.xls, sheet: Sheet1
class AudioCfgManager : public Table::Manager, public Singleton< AudioCfgManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const AudioCfg& Get( int index ) const;
	const AudioCfg* Find( const uint16 key ) const;
	
private:
	friend class Singleton< AudioCfgManager >;
	typedef Table::RepeatField< AudioCfgManager, AudioCfg >	AudioCfgArray;
	
	AudioCfgManager();
	~AudioCfgManager();
	
private:
	const AudioCfgArray *m_array;
};


// ===================================================================
// inline methords of AudioCfg
inline uint16 AudioCfg::Key() const
{
	return Combiner< uint16 >::Combine( m_id );
}

inline uint16 AudioCfg::id() const
{
	return m_id;
}

inline const char* AudioCfg::name() const
{
	return AudioCfgManager::Instance().String( m_name );
}


// inline methords of AudioCfgManager
inline AudioCfgManager::AudioCfgManager()
	: m_array( NULL )
{
}

inline AudioCfgManager::~AudioCfgManager()
{
}

inline int AudioCfgManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* AudioCfgManager::Source() const
{
	return "audiocfg.tbl";
}

inline bool AudioCfgManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const AudioCfgArray *)data;
	return true;
}

inline bool AudioCfgManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const AudioCfgArray *)data;
	return true;
}

inline const AudioCfg& AudioCfgManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const AudioCfg* AudioCfgManager::Find( uint16 key ) const
{
	assert( m_array );
	return BinarySerach< AudioCfg >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
