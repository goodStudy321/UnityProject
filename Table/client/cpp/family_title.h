// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: family_title.prot

#ifndef _TDL_FAMILY_TITLE_H_
#define _TDL_FAMILY_TITLE_H_

#include "table_utility.h"

class FmlTtlInfo;
class FmlTtlInfoManager;


// ===================================================================
#pragma pack( 1 )
class FmlTtlInfo
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 493378320;
	
	uint32 Key() const;
	
	uint32 id() const;
	const char* title() const;
	
private:
	uint32 m_id;
	int    m_title;
};
#pragma pack()

// -------------------------------------------------------------------
// source: D 道庭职称.xls, sheet: Sheet1
class FmlTtlInfoManager : public Table::Manager, public Singleton< FmlTtlInfoManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const FmlTtlInfo& Get( int index ) const;
	const FmlTtlInfo* Find( const uint32 key ) const;
	
private:
	friend class Singleton< FmlTtlInfoManager >;
	typedef Table::RepeatField< FmlTtlInfoManager, FmlTtlInfo >	FmlTtlInfoArray;
	
	FmlTtlInfoManager();
	~FmlTtlInfoManager();
	
private:
	const FmlTtlInfoArray *m_array;
};


// ===================================================================
// inline methords of FmlTtlInfo
inline uint32 FmlTtlInfo::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 FmlTtlInfo::id() const
{
	return m_id;
}

inline const char* FmlTtlInfo::title() const
{
	return FmlTtlInfoManager::Instance().String( m_title );
}


// inline methords of FmlTtlInfoManager
inline FmlTtlInfoManager::FmlTtlInfoManager()
	: m_array( NULL )
{
}

inline FmlTtlInfoManager::~FmlTtlInfoManager()
{
}

inline int FmlTtlInfoManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* FmlTtlInfoManager::Source() const
{
	return "family_title.tbl";
}

inline bool FmlTtlInfoManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const FmlTtlInfoArray *)data;
	return true;
}

inline bool FmlTtlInfoManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const FmlTtlInfoArray *)data;
	return true;
}

inline const FmlTtlInfo& FmlTtlInfoManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const FmlTtlInfo* FmlTtlInfoManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< FmlTtlInfo >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
