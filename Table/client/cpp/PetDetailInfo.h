// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: PetDetailInfo.prot

#ifndef _TDL_PETDETAILINFO_H_
#define _TDL_PETDETAILINFO_H_

#include "table_utility.h"

class PetDetailInfo;
class PetDetailInfoManager;


// ===================================================================
#pragma pack( 1 )
class PetDetailInfo
{
public:
	// nested types ----------------------------------------------------
	typedef Table::RepeatField< PetDetailInfoManager, uint32 >	array;
	
	// -------------------------------------------------------------------
	typedef Table::RepeatField< PetDetailInfoManager, uint32 >	tlist;
	
	typedef uint32	KeyType;
	
	static const uint32 Version = 1548006517;
	
	uint32 Key() const;
	
	uint32 id() const;
	uint8 type() const;
	uint8 step() const;
	const char* name() const;
	const array& condition() const;
	uint32 cost_essence_soul() const;
	uint32 att() const;
	uint32 arm() const;
	uint32 hp() const;
	uint32 def() const;
	const tlist& skills() const;
	const tlist& open_list() const;
	
private:
	uint32 m_id;
	uint8  m_type;
	uint8  m_step;
	int    m_name;
	array  m_condition;
	uint32 m_cost_essence_soul;
	uint32 m_att;
	uint32 m_arm;
	uint32 m_hp;
	uint32 m_def;
	tlist  m_skills;
	tlist  m_open_list;
};
#pragma pack()

// -------------------------------------------------------------------
// source: C 宠物配置表.xls, sheet: Sheet1
class PetDetailInfoManager : public Table::Manager, public Singleton< PetDetailInfoManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const PetDetailInfo& Get( int index ) const;
	const PetDetailInfo* Find( const uint32 key ) const;
	
private:
	friend class Singleton< PetDetailInfoManager >;
	typedef Table::RepeatField< PetDetailInfoManager, PetDetailInfo >	PetDetailInfoArray;
	
	PetDetailInfoManager();
	~PetDetailInfoManager();
	
private:
	const PetDetailInfoArray *m_array;
};


// ===================================================================
// inline methords of PetDetailInfo
inline uint32 PetDetailInfo::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 PetDetailInfo::id() const
{
	return m_id;
}

inline uint8 PetDetailInfo::type() const
{
	return m_type;
}

inline uint8 PetDetailInfo::step() const
{
	return m_step;
}

inline const char* PetDetailInfo::name() const
{
	return PetDetailInfoManager::Instance().String( m_name );
}

inline const PetDetailInfo::array& PetDetailInfo::condition() const
{
	return m_condition;
}

inline uint32 PetDetailInfo::cost_essence_soul() const
{
	return m_cost_essence_soul;
}

inline uint32 PetDetailInfo::att() const
{
	return m_att;
}

inline uint32 PetDetailInfo::arm() const
{
	return m_arm;
}

inline uint32 PetDetailInfo::hp() const
{
	return m_hp;
}

inline uint32 PetDetailInfo::def() const
{
	return m_def;
}

inline const PetDetailInfo::tlist& PetDetailInfo::skills() const
{
	return m_skills;
}

inline const PetDetailInfo::tlist& PetDetailInfo::open_list() const
{
	return m_open_list;
}


// inline methords of PetDetailInfoManager
inline PetDetailInfoManager::PetDetailInfoManager()
	: m_array( NULL )
{
}

inline PetDetailInfoManager::~PetDetailInfoManager()
{
}

inline int PetDetailInfoManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* PetDetailInfoManager::Source() const
{
	return "petdetailinfo.tbl";
}

inline bool PetDetailInfoManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const PetDetailInfoArray *)data;
	return true;
}

inline bool PetDetailInfoManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const PetDetailInfoArray *)data;
	return true;
}

inline const PetDetailInfo& PetDetailInfoManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const PetDetailInfo* PetDetailInfoManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< PetDetailInfo >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
