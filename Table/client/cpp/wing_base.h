// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: wing_base.prot

#ifndef _TDL_WING_BASE_H_
#define _TDL_WING_BASE_H_

#include "table_utility.h"

class WingBase;
class WingBaseManager;


// ===================================================================
#pragma pack( 1 )
class WingBase
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 1728805840;
	
	uint32 Key() const;
	
	uint32 id() const;
	const char* name() const;
	uint8 mount_point() const;
	uint32 model_m() const;
	uint32 model_f() const;
	uint32 ui_model_m() const;
	uint32 ui_model_f() const;
	const char* icon() const;
	
private:
	uint32 m_id;
	int    m_name;
	uint8  m_mount_point;
	uint32 m_model_m;
	uint32 m_model_f;
	uint32 m_ui_model_m;
	uint32 m_ui_model_f;
	int    m_icon;
};
#pragma pack()

// -------------------------------------------------------------------
// source: C 翅膀基础表.xls, sheet: Sheet1
class WingBaseManager : public Table::Manager, public Singleton< WingBaseManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const WingBase& Get( int index ) const;
	const WingBase* Find( const uint32 key ) const;
	
private:
	friend class Singleton< WingBaseManager >;
	typedef Table::RepeatField< WingBaseManager, WingBase >	WingBaseArray;
	
	WingBaseManager();
	~WingBaseManager();
	
private:
	const WingBaseArray *m_array;
};


// ===================================================================
// inline methords of WingBase
inline uint32 WingBase::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 WingBase::id() const
{
	return m_id;
}

inline const char* WingBase::name() const
{
	return WingBaseManager::Instance().String( m_name );
}

inline uint8 WingBase::mount_point() const
{
	return m_mount_point;
}

inline uint32 WingBase::model_m() const
{
	return m_model_m;
}

inline uint32 WingBase::model_f() const
{
	return m_model_f;
}

inline uint32 WingBase::ui_model_m() const
{
	return m_ui_model_m;
}

inline uint32 WingBase::ui_model_f() const
{
	return m_ui_model_f;
}

inline const char* WingBase::icon() const
{
	return WingBaseManager::Instance().String( m_icon );
}


// inline methords of WingBaseManager
inline WingBaseManager::WingBaseManager()
	: m_array( NULL )
{
}

inline WingBaseManager::~WingBaseManager()
{
}

inline int WingBaseManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* WingBaseManager::Source() const
{
	return "wing_base.tbl";
}

inline bool WingBaseManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const WingBaseArray *)data;
	return true;
}

inline bool WingBaseManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const WingBaseArray *)data;
	return true;
}

inline const WingBase& WingBaseManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const WingBase* WingBaseManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< WingBase >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
