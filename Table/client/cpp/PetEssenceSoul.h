// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: PetEssenceSoul.prot

#ifndef _TDL_PETESSENCESOUL_H_
#define _TDL_PETESSENCESOUL_H_

#include "table_utility.h"

class PetEssenceSoul;
class PetEssenceSoulManager;


// ===================================================================
#pragma pack( 1 )
class PetEssenceSoul
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 3212700625;
	
	uint32 Key() const;
	
	uint32 id() const;
	const char* name() const;
	const char* icon() const;
	uint32 att() const;
	uint32 def() const;
	uint32 hp() const;
	uint32 crit_max() const;
	uint32 crit() const;
	uint32 count() const;
	
private:
	uint32 m_id;
	int    m_name;
	int    m_icon;
	uint32 m_att;
	uint32 m_def;
	uint32 m_hp;
	uint32 m_crit_max;
	uint32 m_crit;
	uint32 m_count;
};
#pragma pack()

// -------------------------------------------------------------------
// source: C 宠物精魄表.xls, sheet: Sheet1
class PetEssenceSoulManager : public Table::Manager, public Singleton< PetEssenceSoulManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const PetEssenceSoul& Get( int index ) const;
	const PetEssenceSoul* Find( const uint32 key ) const;
	
private:
	friend class Singleton< PetEssenceSoulManager >;
	typedef Table::RepeatField< PetEssenceSoulManager, PetEssenceSoul >	PetEssenceSoulArray;
	
	PetEssenceSoulManager();
	~PetEssenceSoulManager();
	
private:
	const PetEssenceSoulArray *m_array;
};


// ===================================================================
// inline methords of PetEssenceSoul
inline uint32 PetEssenceSoul::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 PetEssenceSoul::id() const
{
	return m_id;
}

inline const char* PetEssenceSoul::name() const
{
	return PetEssenceSoulManager::Instance().String( m_name );
}

inline const char* PetEssenceSoul::icon() const
{
	return PetEssenceSoulManager::Instance().String( m_icon );
}

inline uint32 PetEssenceSoul::att() const
{
	return m_att;
}

inline uint32 PetEssenceSoul::def() const
{
	return m_def;
}

inline uint32 PetEssenceSoul::hp() const
{
	return m_hp;
}

inline uint32 PetEssenceSoul::crit_max() const
{
	return m_crit_max;
}

inline uint32 PetEssenceSoul::crit() const
{
	return m_crit;
}

inline uint32 PetEssenceSoul::count() const
{
	return m_count;
}


// inline methords of PetEssenceSoulManager
inline PetEssenceSoulManager::PetEssenceSoulManager()
	: m_array( NULL )
{
}

inline PetEssenceSoulManager::~PetEssenceSoulManager()
{
}

inline int PetEssenceSoulManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* PetEssenceSoulManager::Source() const
{
	return "petessencesoul.tbl";
}

inline bool PetEssenceSoulManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const PetEssenceSoulArray *)data;
	return true;
}

inline bool PetEssenceSoulManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const PetEssenceSoulArray *)data;
	return true;
}

inline const PetEssenceSoul& PetEssenceSoulManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const PetEssenceSoul* PetEssenceSoulManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< PetEssenceSoul >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
