// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: id_res.prot

#ifndef _TDL_ID_RES_H_
#define _TDL_ID_RES_H_

#include "table_utility.h"

class IdRes;
class IdResManager;


// ===================================================================
#pragma pack( 1 )
class IdRes
{
public:
	// nested types ----------------------------------------------------
	typedef Table::RepeatField< IdResManager, Table::String< IdResManager > >	resPFList;
	
	typedef uint32	KeyType;
	
	static const uint32 Version = 2608932030;
	
	uint32 Key() const;
	
	uint32 id() const;
	const char* res_name() const;
	uint8 trigger_ent() const;
	const char* ent_str() const;
	uint8 type() const;
	uint8 type_index() const;
	const resPFList& respf_list() const;
	
private:
	uint32    m_id;
	int       m_res_name;
	uint8     m_trigger_ent;
	int       m_ent_str;
	uint8     m_type;
	uint8     m_type_index;
	resPFList m_respf_list;
};
#pragma pack()

// -------------------------------------------------------------------
// source: I ID资源事件配置表.xls, sheet: Sheet1
class IdResManager : public Table::Manager, public Singleton< IdResManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const IdRes& Get( int index ) const;
	const IdRes* Find( const uint32 key ) const;
	
private:
	friend class Singleton< IdResManager >;
	typedef Table::RepeatField< IdResManager, IdRes >	IdResArray;
	
	IdResManager();
	~IdResManager();
	
private:
	const IdResArray *m_array;
};


// ===================================================================
// inline methords of IdRes
inline uint32 IdRes::Key() const
{
	return Combiner< uint32 >::Combine( m_id );
}

inline uint32 IdRes::id() const
{
	return m_id;
}

inline const char* IdRes::res_name() const
{
	return IdResManager::Instance().String( m_res_name );
}

inline uint8 IdRes::trigger_ent() const
{
	return m_trigger_ent;
}

inline const char* IdRes::ent_str() const
{
	return IdResManager::Instance().String( m_ent_str );
}

inline uint8 IdRes::type() const
{
	return m_type;
}

inline uint8 IdRes::type_index() const
{
	return m_type_index;
}

inline const IdRes::resPFList& IdRes::respf_list() const
{
	return m_respf_list;
}


// inline methords of IdResManager
inline IdResManager::IdResManager()
	: m_array( NULL )
{
}

inline IdResManager::~IdResManager()
{
}

inline int IdResManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* IdResManager::Source() const
{
	return "id_res.tbl";
}

inline bool IdResManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const IdResArray *)data;
	return true;
}

inline bool IdResManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const IdResArray *)data;
	return true;
}

inline const IdRes& IdResManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const IdRes* IdResManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< IdRes >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
