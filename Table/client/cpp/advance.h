// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: advance.prot

#ifndef _TDL_ADVANCE_H_
#define _TDL_ADVANCE_H_

#include "table_utility.h"

class Advance;
class AdvanceManager;


// ===================================================================
#pragma pack( 1 )
class Advance
{
public:
	// nested types ----------------------------------------------------
	typedef uint32	KeyType;
	
	static const uint32 Version = 13890925;
	
	uint32 Key() const;
	
	uint32 baseid() const;
	uint32 level() const;
	const char* name() const;
	uint16 model_id_man() const;
	uint16 model_id_woman() const;
	uint8 mount_point() const;
	const char* pathicon() const;
	
private:
	uint32 m_baseid;
	uint32 m_level;
	int    m_name;
	uint16 m_model_id_man;
	uint16 m_model_id_woman;
	uint8  m_mount_point;
	int    m_pathicon;
};
#pragma pack()

// -------------------------------------------------------------------
// source: J 进阶表.xls, sheet: Sheet1
class AdvanceManager : public Table::Manager, public Singleton< AdvanceManager >
{
public:
	int Size() const;
	const char* Source() const;
	bool Load( const char *path );
	bool Reload( const char *path );
	
	const Advance& Get( int index ) const;
	const Advance* Find( const uint32 key ) const;
	
private:
	friend class Singleton< AdvanceManager >;
	typedef Table::RepeatField< AdvanceManager, Advance >	AdvanceArray;
	
	AdvanceManager();
	~AdvanceManager();
	
private:
	const AdvanceArray *m_array;
};


// ===================================================================
// inline methords of Advance
inline uint32 Advance::Key() const
{
	return Combiner< uint32 >::Combine( m_baseid );
}

inline uint32 Advance::baseid() const
{
	return m_baseid;
}

inline uint32 Advance::level() const
{
	return m_level;
}

inline const char* Advance::name() const
{
	return AdvanceManager::Instance().String( m_name );
}

inline uint16 Advance::model_id_man() const
{
	return m_model_id_man;
}

inline uint16 Advance::model_id_woman() const
{
	return m_model_id_woman;
}

inline uint8 Advance::mount_point() const
{
	return m_mount_point;
}

inline const char* Advance::pathicon() const
{
	return AdvanceManager::Instance().String( m_pathicon );
}


// inline methords of AdvanceManager
inline AdvanceManager::AdvanceManager()
	: m_array( NULL )
{
}

inline AdvanceManager::~AdvanceManager()
{
}

inline int AdvanceManager::Size() const
{
	assert( m_array );
	return m_array->Size();
}

inline const char* AdvanceManager::Source() const
{
	return "advance.tbl";
}

inline bool AdvanceManager::Load( const char *path )
{
	const char *data = Table::Manager::Load( path, Source() );
	if( !data )
		return false;
		
	m_array = (const AdvanceArray *)data;
	return true;
}

inline bool AdvanceManager::Reload( const char *path )
{
	const char *data = Table::Manager::Reload( path, Source() );
	if( !data )
		return false;
		
	m_array = (const AdvanceArray *)data;
	return true;
}

inline const Advance& AdvanceManager::Get( int index ) const
{
	assert( m_array );
	return m_array->Get( index );
}

inline const Advance* AdvanceManager::Find( uint32 key ) const
{
	assert( m_array );
	return BinarySerach< Advance >( Data( m_array->Offset() ), m_array->Size(), key );
}


#endif
