// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: scene_trigger.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class SceneTrigger : Table.Binary, Table.IKey
{
	#region vector3
	public class vector3 : Table.Binary
	{
		Int32 m_x;
		Int32 m_z;
		
		public Int32 x
		{
			get { return m_x; }
		}
		
		public Int32 z
		{
			get { return m_z; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_x).Load(ref m_z);
			return loader.Size;
		}
	}
	#endregion
	
	UInt32       m_ID;
	Table.String m_triggerName;
	vector3      m_left;
	vector3      m_right;
	Byte         m_times;
	Byte         m_premiseTimes;
	
	public const UInt32 Version = 1375938042;
	
	public UInt64 Key()
	{
		return m_ID;
	}
	
	public UInt32 iD
	{
		get { return m_ID; }
	}
	
	public string triggerName
	{
		get { return m_triggerName; }
	}
	
	public vector3 left
	{
		get { return m_left; }
	}
	
	public vector3 right
	{
		get { return m_right; }
	}
	
	public Byte times
	{
		get { return m_times; }
	}
	
	public Byte premiseTimes
	{
		get { return m_premiseTimes; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_ID).Load(ref m_triggerName).Load(ref m_left).Load(ref m_right).Load(ref m_times).Load(ref m_premiseTimes);
		return loader.Size;
	}
}

// source: C 场景Trigger配置表.xls, sheet: Sheet1
public sealed class SceneTriggerManager : Table.Manager<SceneTrigger>
{
	private static readonly SceneTriggerManager ms_instance = new SceneTriggerManager();
	
	private SceneTriggerManager()
	{
	}
	
	public static SceneTriggerManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "scene_trigger.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, SceneTrigger.Version);
	}
	
	public SceneTrigger Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewSceneTrigger()
	{
		return new SceneTrigger();
	}
	public static object NewSceneTriggervector3()
	{
		return new SceneTrigger.vector3();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(SceneTrigger), NewSceneTrigger);
		Table.NewHelper.Register(typeof(SceneTrigger.vector3), NewSceneTriggervector3);
	}
	#endregion
}

