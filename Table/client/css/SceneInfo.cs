// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: scene_info.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class SceneInfo : Table.Binary, Table.IKey
{
	#region vector3
	public class vector3 : Table.Binary
	{
		Int32 m_x;
		Int32 m_y;
		Int32 m_z;
		
		public Int32 x
		{
			get { return m_x; }
		}
		
		public Int32 y
		{
			get { return m_y; }
		}
		
		public Int32 z
		{
			get { return m_z; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_x).Load(ref m_y).Load(ref m_z);
			return loader.Size;
		}
	}
	#endregion
	
	#region npcs
	public class npcs : Table.Binary
	{
		List<UInt32> m_list;
		
		public List<UInt32> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region res_npc
	public class res_npc : Table.Binary
	{
		List<npcs> m_list;
		
		public List<npcs> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region triggers
	public class triggers : Table.Binary
	{
		List<Table.String> m_list;
		
		public List<Table.String> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region update
	public class update : Table.Binary
	{
		List<UInt32> m_list;
		
		public List<UInt32> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region sceneids
	public class sceneids : Table.Binary
	{
		List<UInt32> m_list;
		
		public List<UInt32> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region uilist
	public class uilist : Table.Binary
	{
		List<UInt16> m_list;
		
		public List<UInt16> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region fightmodestruct
	public class fightmodestruct : Table.Binary
	{
		List<Byte> m_list;
		
		public List<Byte> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region res_screen
	public class res_screen : Table.Binary
	{
		List<Table.String> m_list;
		
		public List<Table.String> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region fbUnits
	public class fbUnits : Table.Binary
	{
		List<Byte> m_list;
		
		public List<Byte> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	UInt32          m_id;
	Table.String    m_name;
	Table.String    m_comment;
	Byte            m_dontDestroy;
	res_screen      m_res_name;
	Table.String    m_gridName;
	Table.String    m_bgm;
	UInt16          m_camSet;
	uilist          m_openUI;
	Byte            m_scene_type;
	Byte            m_scene_sub_type;
	Int32           m_show_num;
	Byte            m_can_hit_safe_mons;
	npcs            m_npc_list;
	update          m_update_list;
	Byte            m_isNorRevive;
	Byte            m_isOrigRevive;
	triggers        m_Trigger;
	UInt32          m_map_id;
	sceneids        m_link_scene;
	triggers        m_mission_trigger;
	triggers        m_enter_scene_trigger;
	fightmodestruct m_fightmodes;
	UInt16          m_playId;
	fbUnits         m_fbUnitList;
	Table.String    m_maptex;
	Byte            m_portal_type;
	UInt32          m_scene_view;
	Byte            m_enable_preload;
	Byte            m_forbid_cam_ctrl;
	
	public const UInt32 Version = 2614937556;
	
	public UInt64 Key()
	{
		return m_id;
	}
	
	public UInt32 id
	{
		get { return m_id; }
	}
	
	public string name
	{
		get { return m_name; }
	}
	
	public string comment
	{
		get { return m_comment; }
	}
	
	public Byte dontDestroy
	{
		get { return m_dontDestroy; }
	}
	
	public res_screen resName
	{
		get { return m_res_name; }
	}
	
	public string gridName
	{
		get { return m_gridName; }
	}
	
	public string bgm
	{
		get { return m_bgm; }
	}
	
	public UInt16 camSet
	{
		get { return m_camSet; }
	}
	
	public uilist openUI
	{
		get { return m_openUI; }
	}
	
	public Byte sceneType
	{
		get { return m_scene_type; }
	}
	
	public Byte sceneSubType
	{
		get { return m_scene_sub_type; }
	}
	
	public Int32 showNum
	{
		get { return m_show_num; }
	}
	
	public Byte canHitSafeMons
	{
		get { return m_can_hit_safe_mons; }
	}
	
	public npcs npcList
	{
		get { return m_npc_list; }
	}
	
	public update updateList
	{
		get { return m_update_list; }
	}
	
	public Byte isNorRevive
	{
		get { return m_isNorRevive; }
	}
	
	public Byte isOrigRevive
	{
		get { return m_isOrigRevive; }
	}
	
	public triggers trigger
	{
		get { return m_Trigger; }
	}
	
	public UInt32 mapId
	{
		get { return m_map_id; }
	}
	
	public sceneids linkScene
	{
		get { return m_link_scene; }
	}
	
	public triggers missionTrigger
	{
		get { return m_mission_trigger; }
	}
	
	public triggers enterSceneTrigger
	{
		get { return m_enter_scene_trigger; }
	}
	
	public fightmodestruct fightmodes
	{
		get { return m_fightmodes; }
	}
	
	public UInt16 playId
	{
		get { return m_playId; }
	}
	
	public fbUnits fbUnitList
	{
		get { return m_fbUnitList; }
	}
	
	public string maptex
	{
		get { return m_maptex; }
	}
	
	public Byte portalType
	{
		get { return m_portal_type; }
	}
	
	public UInt32 sceneView
	{
		get { return m_scene_view; }
	}
	
	public Byte enablePreload
	{
		get { return m_enable_preload; }
	}
	
	public Byte forbidCamCtrl
	{
		get { return m_forbid_cam_ctrl; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_id).Load(ref m_name).Load(ref m_comment).Load(ref m_dontDestroy).Load(ref m_res_name).Load(ref m_gridName).Load(ref m_bgm).Load(ref m_camSet).Load(ref m_openUI).Load(ref m_scene_type).Load(ref m_scene_sub_type).Load(ref m_show_num).Load(ref m_can_hit_safe_mons).Load(ref m_npc_list).Load(ref m_update_list).Load(ref m_isNorRevive).Load(ref m_isOrigRevive).Load(ref m_Trigger).Load(ref m_map_id).Load(ref m_link_scene).Load(ref m_mission_trigger).Load(ref m_enter_scene_trigger).Load(ref m_fightmodes).Load(ref m_playId).Load(ref m_fbUnitList).Load(ref m_maptex).Load(ref m_portal_type).Load(ref m_scene_view).Load(ref m_enable_preload).Load(ref m_forbid_cam_ctrl);
		return loader.Size;
	}
}

// source: C 场景设置表.xls, sheet: Sheet1
public sealed class SceneInfoManager : Table.Manager<SceneInfo>
{
	private static readonly SceneInfoManager ms_instance = new SceneInfoManager();
	
	private SceneInfoManager()
	{
	}
	
	public static SceneInfoManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "scene_info.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, SceneInfo.Version);
	}
	
	public SceneInfo Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewSceneInfo()
	{
		return new SceneInfo();
	}
	public static object NewSceneInfovector3()
	{
		return new SceneInfo.vector3();
	}
	
	public static object NewSceneInfonpcs()
	{
		return new SceneInfo.npcs();
	}
	
	public static object NewSceneInfores_npc()
	{
		return new SceneInfo.res_npc();
	}
	
	public static object NewSceneInfotriggers()
	{
		return new SceneInfo.triggers();
	}
	
	public static object NewSceneInfoupdate()
	{
		return new SceneInfo.update();
	}
	
	public static object NewSceneInfosceneids()
	{
		return new SceneInfo.sceneids();
	}
	
	public static object NewSceneInfouilist()
	{
		return new SceneInfo.uilist();
	}
	
	public static object NewSceneInfofightmodestruct()
	{
		return new SceneInfo.fightmodestruct();
	}
	
	public static object NewSceneInfores_screen()
	{
		return new SceneInfo.res_screen();
	}
	
	public static object NewSceneInfofbUnits()
	{
		return new SceneInfo.fbUnits();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(SceneInfo), NewSceneInfo);
		Table.NewHelper.Register(typeof(SceneInfo.vector3), NewSceneInfovector3);
		Table.NewHelper.Register(typeof(SceneInfo.npcs), NewSceneInfonpcs);
		Table.NewHelper.Register(typeof(SceneInfo.res_npc), NewSceneInfores_npc);
		Table.NewHelper.Register(typeof(SceneInfo.triggers), NewSceneInfotriggers);
		Table.NewHelper.Register(typeof(SceneInfo.update), NewSceneInfoupdate);
		Table.NewHelper.Register(typeof(SceneInfo.sceneids), NewSceneInfosceneids);
		Table.NewHelper.Register(typeof(SceneInfo.uilist), NewSceneInfouilist);
		Table.NewHelper.Register(typeof(SceneInfo.fightmodestruct), NewSceneInfofightmodestruct);
		Table.NewHelper.Register(typeof(SceneInfo.res_screen), NewSceneInfores_screen);
		Table.NewHelper.Register(typeof(SceneInfo.fbUnits), NewSceneInfofbUnits);
	}
	#endregion
}

