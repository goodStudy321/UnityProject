// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: WildMap.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class WildMap : Table.Binary, Table.IKey
{
	#region vecto2
	public class vecto2 : Table.Binary
	{
		Int32 m_x;
		Int32 m_z;
		
		public Int32 x
		{
			get { return m_x; }
		}
		
		public Int32 z
		{
			get { return m_z; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_x).Load(ref m_z);
			return loader.Size;
		}
	}
	#endregion
	
	UInt32 m_id;
	UInt32 m_monster_id;
	UInt32 m_collection_id;
	vecto2 m_left_pos;
	vecto2 m_right_pos;
	
	public const UInt32 Version = 625692780;
	
	public UInt64 Key()
	{
		return m_id;
	}
	
	public UInt32 id
	{
		get { return m_id; }
	}
	
	public UInt32 monsterId
	{
		get { return m_monster_id; }
	}
	
	public UInt32 collectionId
	{
		get { return m_collection_id; }
	}
	
	public vecto2 leftPos
	{
		get { return m_left_pos; }
	}
	
	public vecto2 rightPos
	{
		get { return m_right_pos; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_id).Load(ref m_monster_id).Load(ref m_collection_id).Load(ref m_left_pos).Load(ref m_right_pos);
		return loader.Size;
	}
}

// source: Y 野外地图.xls, sheet: 刷新列表
public sealed class WildMapManager : Table.Manager<WildMap>
{
	private static readonly WildMapManager ms_instance = new WildMapManager();
	
	private WildMapManager()
	{
	}
	
	public static WildMapManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "wildmap.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, WildMap.Version);
	}
	
	public WildMap Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewWildMap()
	{
		return new WildMap();
	}
	public static object NewWildMapvecto2()
	{
		return new WildMap.vecto2();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(WildMap), NewWildMap);
		Table.NewHelper.Register(typeof(WildMap.vecto2), NewWildMapvecto2);
	}
	#endregion
}

