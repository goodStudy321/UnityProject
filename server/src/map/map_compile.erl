%%%-------------------------------------------------------------------
%%% @author laijichang
%%% @copyright (C) 2017, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 08. 六月 2017 14:22
%%%-------------------------------------------------------------------
-module(map_compile).
-author("laijichang").
-include("../../include/global.hrl"). 

%% API
-export([
    main/1
]).

main([File, OutputDir]) ->
    EbinPath = filename:dirname(escript:script_name()),
    code:add_path(EbinPath),
    FileList = get_file_list([File], [], []),
    [do_compile(FileName, OutputDir) || FileName <- FileList].

do_compile(FileName, OutputDir) ->
    {ok, Bin} = file:read_file(FileName),
    Config =  proto:decode_msg(Bin, c_map_config),
    #c_map_config{
        map_id = MapID,
        map_type = MapType,
        map_width = Width,
        map_height = Height,
        map_offset_mx = OffsetMx,
        map_offset_my = OffsetMy,
        tiles = Tiles,
        born_points = BornPoints,
        jump_points = JumpPoints} = Config,
    Header = "%% coding: latin-1\n%%---------------------------------------------------------
%% This file is generated by script,please do not edit it
%% ---------------------------------------------------------
-module(map_" ++ lib_tool:to_output(MapID) ++ ").\n",
    Header2 = "-include(\"config.hrl\").\n-export[find/1].\n?CFG_H\n\n",
    Info = "?C(info, " ++ lib_tool:to_output({Width, Height}) ++ ")\n",
    Offset = "?C(offset, " ++ lib_tool:to_output({OffsetMx, OffsetMy}) ++ ")\n",
    MapType2 = "?C(map_type, " ++ lib_tool:to_output(MapType) ++ ")\n",
    BornPoints2 = "?C(born_points, " ++ lib_tool:to_output(BornPoints) ++ ")\n",
    JumpPoints2 = "?C(jump_points, " ++ lib_tool:to_output(JumpPoints) ++ ")\n",

    {TilesString, _TileList2} =
        lists:foldl(
            fun(#c_map_tile{x = Tx, y = Ty} = Tile, {Acc1, Acc2}) ->
                StringTile = "?C(" ++ lib_tool:to_output({Tx, Ty}) ++ ", " ++ lib_tool:to_output(Tile) ++ ")\n",
                {StringTile ++ Acc1, [{Tx, Ty}|Acc2]}
            end, {[], []}, lists:sort(lib_tool:list_filter_repeat(Tiles))),

%%    TileList3 = "?C(tiles, " ++ lib_tool:to_output(TileList2) ++ ")\n",

    Content = Header ++ Header2 ++ Info ++ Offset ++ MapType2 ++ BornPoints2 ++ JumpPoints2 ++ TilesString ++ "\n?CFG_E.",
    OutputName = lists:concat(["map_", MapID, ".erl"]),
    OutputName2 = filename:join(OutputDir, OutputName),
    ok = filelib:ensure_dir(OutputDir),
    ok = file:write_file(OutputName2, Content).

get_file_list([], _RootDir, FileList) ->
    FileList;
get_file_list([T|R], RootDir, FileAcc) ->
    Cur = RootDir ++ T,
    case filelib:is_dir(Cur) of
        true ->
            {ok, List} = file:list_dir_all(Cur),
            FileAcc2 = get_file_list(List, Cur ++ "/", []);
        _ ->
            FileAcc2 = [RootDir ++ T]
    end,
    get_file_list(R, RootDir, FileAcc2 ++ FileAcc).