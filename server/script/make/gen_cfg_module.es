#!/usr/bin/env escript
%% -*- erlang -*-

%% vim: set ft=erlang:
-mode(compile).
-define(ROLE_DIR, filename:join("src", "role")).
-define(DIR_LIST, [?ROLE_DIR]).
-define(DYN_DIR, filename:join("config", "dyn")).
-define(CFG_FILE, filename:join(?DYN_DIR, "cfg_module_etc.erl")).
-define(EXIT, halt(1)).

%% 两种配置方式
%% {FuncName, Args} || {FuncName, Args, SortList(填写模块按顺序执行)}
-define(EXPORTS, [
    {pre_init, 1},
    {init, 1},
    {pre_enter, 1},
    {day_reset, 1, [mod_role_resource]},
    {loop, 2},
    {loop_min, 2},
    {loop_10min, 2},
    {hour_change, 2},
    {zero, 1},
    {calc, 1, [mod_role_skill, mod_role_buff]},
    {pre_online, 1},
    {online, 1},
    {offline, 1}
]).

main([]) ->
    io:format("generating cfg_module_etc...~n"),
    FileList = lists:foldl(
                 fun(Dir,Acc)->
                         FileListT = filelib:wildcard(filename:join([Dir, "*", "mod_role_*.erl"])),
                         FileListT ++ Acc
                 end, [], ?DIR_LIST),
    ExportData = get_export(FileList),
    filelib:ensure_dir(?DYN_DIR),
    gen_erl(ExportData),
    io:format("generate cfg_module_etc successfully!~n").

get_export(Files) ->
    FileList = [ {get_module_name(File), get_export_list(File)}|| File <- Files],
    lists:foldl(
        fun(I, Acc) ->
            {Func, SortList} =
                case I of
                    {FunName, Args, ConfigList} ->
                        {{FunName, Args}, ConfigList};
                    _ ->
                        {I, []}
                end,
            FunFileList = get_export_file(FileList, Func, []),
            SortList2 = [ SortFile || SortFile <- SortList, lists:member(SortFile, FunFileList)],
            [{Func, SortList2 ++ (FunFileList -- SortList2)}|Acc]
        end, [], ?EXPORTS).

get_export_file([], _Func, Acc) ->
    Acc;
get_export_file([{FileName, FunList}|R], Func, Acc) ->
    Acc2 =
        case lists:member(Func, FunList) of
            true ->
                [FileName|Acc];
            _ ->
                Acc
        end,
    get_export_file(R, Func, Acc2).

get_module_name(File) ->
    Name = filename:basename(File, ".erl"),
    erlang:list_to_atom(Name).

gen_erl(ExportData) ->
    Header = "%% coding: latin-1\n
%% this file is generated by gen_cfg_module, don't edit it manually.	
-module(cfg_module_etc).
-include(\"config.hrl\").
-export([find/1]).
?CFG_H
",
    Body = [io_lib:format("?C(role_~s_modules,~10p)~n~n", [FunName, Modules]) || {{FunName, _Arity}, Modules} <- ExportData],
    Tail = "?CFG_E.",
    % io:format("~ts~n", [OnlinesStr]),
    file:write_file(?CFG_FILE, [Header, Body, Tail]).

get_export_list(File) ->
    {ok, Tree} = epp:parse_file(File, [], []),
    get_export_list(Tree, []).

get_export_list([], Acc) ->
    Acc;
get_export_list([{attribute, _, export, Exports} | T], Acc) ->
    get_export_list(T, Exports ++ Acc);
get_export_list([_ | T], Acc) ->
    get_export_list(T, Acc).

