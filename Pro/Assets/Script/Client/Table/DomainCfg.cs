// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: domainCfg.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class DomainCfg : Table.Binary, Table.IKey
{
	UInt16       m_id;
	Table.String m_inter;
	Table.String m_exter;
	Table.String m_exterTest;
	
	public const UInt32 Version = 2616352553;
	
	public UInt64 Key()
	{
		return m_id;
	}
	
	public UInt16 id
	{
		get { return m_id; }
	}
	
	public string inter
	{
		get { return m_inter; }
	}
	
	public string exter
	{
		get { return m_exter; }
	}
	
	public string exterTest
	{
		get { return m_exterTest; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_id).Load(ref m_inter).Load(ref m_exter).Load(ref m_exterTest);
		return loader.Size;
	}
}

// source: Y 域名配置.xls, sheet: Sheet1
public sealed class DomainCfgManager : Table.Manager<DomainCfg>
{
	private static readonly DomainCfgManager ms_instance = new DomainCfgManager();
	
	private DomainCfgManager()
	{
	}
	
	public static DomainCfgManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "domaincfg.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, DomainCfg.Version);
	}
	
	public DomainCfg Find(UInt16 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewDomainCfg()
	{
		return new DomainCfg();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(DomainCfg), NewDomainCfg);
	}
	#endregion
}

