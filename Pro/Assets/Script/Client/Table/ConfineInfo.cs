// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: confine_info.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class Confine : Table.Binary, Table.IKey
{
	UInt32       m_confine;
	Table.String m_confineStr;
	Table.String m_path;
	Table.String m_aperturePath;
	
	public const UInt32 Version = 3654768724;
	
	public UInt64 Key()
	{
		return m_confine;
	}
	
	public UInt32 confine
	{
		get { return m_confine; }
	}
	
	public string confineStr
	{
		get { return m_confineStr; }
	}
	
	public string path
	{
		get { return m_path; }
	}
	
	public string aperturePath
	{
		get { return m_aperturePath; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_confine).Load(ref m_confineStr).Load(ref m_path).Load(ref m_aperturePath);
		return loader.Size;
	}
}

// source: J 境界系统.xls, sheet: Sheet1
public sealed class ConfineManager : Table.Manager<Confine>
{
	private static readonly ConfineManager ms_instance = new ConfineManager();
	
	private ConfineManager()
	{
	}
	
	public static ConfineManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "confine_info.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, Confine.Version);
	}
	
	public Confine Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewConfine()
	{
		return new Confine();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(Confine), NewConfine);
	}
	#endregion
}

