// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: MagicWeaponLevel.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class MagicWeaponLevel : Table.Binary, Table.IKey
{
	#region array
	public class array : Table.Binary
	{
		List<UInt32> m_list;
		
		public List<UInt32> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	UInt32 m_level;
	array  m_skills;
	
	public const UInt32 Version = 1591856823;
	
	public UInt64 Key()
	{
		return m_level;
	}
	
	public UInt32 level
	{
		get { return m_level; }
	}
	
	public array skills
	{
		get { return m_skills; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_level).Load(ref m_skills);
		return loader.Size;
	}
}

// source: F 法宝等级表.xls, sheet: Sheet1
public sealed class MagicWeaponLevelManager : Table.Manager<MagicWeaponLevel>
{
	private static readonly MagicWeaponLevelManager ms_instance = new MagicWeaponLevelManager();
	
	private MagicWeaponLevelManager()
	{
	}
	
	public static MagicWeaponLevelManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "magicweaponlevel.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, MagicWeaponLevel.Version);
	}
	
	public MagicWeaponLevel Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewMagicWeaponLevel()
	{
		return new MagicWeaponLevel();
	}
	public static object NewMagicWeaponLevelarray()
	{
		return new MagicWeaponLevel.array();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(MagicWeaponLevel), NewMagicWeaponLevel);
		Table.NewHelper.Register(typeof(MagicWeaponLevel.array), NewMagicWeaponLevelarray);
	}
	#endregion
}

