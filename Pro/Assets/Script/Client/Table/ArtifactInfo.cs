// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: artifact_info.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class ArtifactInfo : Table.Binary, Table.IKey
{
	UInt32       m_baseid;
	Table.String m_name;
	UInt16       m_model_id_man;
	UInt16       m_model_id_woman;
	UInt16       m_model_ui_id_man;
	UInt16       m_model_ui_id_woman;
	Byte         m_mount_point;
	
	public const UInt32 Version = 4057804896;
	
	public UInt64 Key()
	{
		return m_baseid;
	}
	
	public UInt32 baseid
	{
		get { return m_baseid; }
	}
	
	public string name
	{
		get { return m_name; }
	}
	
	public UInt16 modelIdMan
	{
		get { return m_model_id_man; }
	}
	
	public UInt16 modelIdWoman
	{
		get { return m_model_id_woman; }
	}
	
	public UInt16 modelUiIdMan
	{
		get { return m_model_ui_id_man; }
	}
	
	public UInt16 modelUiIdWoman
	{
		get { return m_model_ui_id_woman; }
	}
	
	public Byte mountPoint
	{
		get { return m_mount_point; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_baseid).Load(ref m_name).Load(ref m_model_id_man).Load(ref m_model_id_woman).Load(ref m_model_ui_id_man).Load(ref m_model_ui_id_woman).Load(ref m_mount_point);
		return loader.Size;
	}
}

// source: S 神兵基础表.xls, sheet: Sheet1
public sealed class ArtifactInfoManager : Table.Manager<ArtifactInfo>
{
	private static readonly ArtifactInfoManager ms_instance = new ArtifactInfoManager();
	
	private ArtifactInfoManager()
	{
	}
	
	public static ArtifactInfoManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "artifact_info.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, ArtifactInfo.Version);
	}
	
	public ArtifactInfo Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewArtifactInfo()
	{
		return new ArtifactInfo();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(ArtifactInfo), NewArtifactInfo);
	}
	#endregion
}

