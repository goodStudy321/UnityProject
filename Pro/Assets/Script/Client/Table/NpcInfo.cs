// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: npc_info.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class NPCInfo : Table.Binary, Table.IKey
{
	#region vector3
	public class vector3 : Table.Binary
	{
		Int32 m_x;
		Int32 m_y;
		Int32 m_z;
		
		public Int32 x
		{
			get { return m_x; }
		}
		
		public Int32 y
		{
			get { return m_y; }
		}
		
		public Int32 z
		{
			get { return m_z; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_x).Load(ref m_y).Load(ref m_z);
			return loader.Size;
		}
	}
	#endregion
	
	#region data
	public class data : Table.Binary
	{
		Byte         m_type;
		Table.String m_btn_des;
		UInt32       m_id;
		
		public Byte type
		{
			get { return m_type; }
		}
		
		public string btnDes
		{
			get { return m_btn_des; }
		}
		
		public UInt32 id
		{
			get { return m_id; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_type).Load(ref m_btn_des).Load(ref m_id);
			return loader.Size;
		}
	}
	#endregion
	
	#region hide
	public class hide : Table.Binary
	{
		UInt32 m_scene_id;
		UInt32 m_mission_id;
		
		public UInt32 sceneId
		{
			get { return m_scene_id; }
		}
		
		public UInt32 missionId
		{
			get { return m_mission_id; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_scene_id).Load(ref m_mission_id);
			return loader.Size;
		}
	}
	#endregion
	
	#region hideList
	public class hideList : Table.Binary
	{
		List<hide> m_list;
		
		public List<hide> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	UInt32       m_id;
	UInt16       m_mode_id;
	UInt16       m_ui_mode_id;
	Table.String m_name;
	Table.String m_head_pic_path;
	Table.String m_title;
	Byte         m_type;
	UInt32       m_map_id;
	vector3      m_pos;
	UInt16       m_rot;
	UInt16       m_scal;
	Byte         m_camp;
	Byte         m_interactive;
	data         m_interactive_data;
	Table.String m_interactive_talk;
	Table.String m_audio;
	hideList     m_h_list;
	hideList     m_s_list;
	Table.String m_pose;
	Byte         m_rotation;
	
	public const UInt32 Version = 1768006109;
	
	public UInt64 Key()
	{
		return m_id;
	}
	
	public UInt32 id
	{
		get { return m_id; }
	}
	
	public UInt16 modeId
	{
		get { return m_mode_id; }
	}
	
	public UInt16 uiModeId
	{
		get { return m_ui_mode_id; }
	}
	
	public string name
	{
		get { return m_name; }
	}
	
	public string headPicPath
	{
		get { return m_head_pic_path; }
	}
	
	public string title
	{
		get { return m_title; }
	}
	
	public Byte type
	{
		get { return m_type; }
	}
	
	public UInt32 mapId
	{
		get { return m_map_id; }
	}
	
	public vector3 pos
	{
		get { return m_pos; }
	}
	
	public UInt16 rot
	{
		get { return m_rot; }
	}
	
	public UInt16 scal
	{
		get { return m_scal; }
	}
	
	public Byte camp
	{
		get { return m_camp; }
	}
	
	public Byte interactive
	{
		get { return m_interactive; }
	}
	
	public data interactiveData
	{
		get { return m_interactive_data; }
	}
	
	public string interactiveTalk
	{
		get { return m_interactive_talk; }
	}
	
	public string audio
	{
		get { return m_audio; }
	}
	
	public hideList hList
	{
		get { return m_h_list; }
	}
	
	public hideList sList
	{
		get { return m_s_list; }
	}
	
	public string pose
	{
		get { return m_pose; }
	}
	
	public Byte rotation
	{
		get { return m_rotation; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_id).Load(ref m_mode_id).Load(ref m_ui_mode_id).Load(ref m_name).Load(ref m_head_pic_path).Load(ref m_title).Load(ref m_type).Load(ref m_map_id).Load(ref m_pos).Load(ref m_rot).Load(ref m_scal).Load(ref m_camp).Load(ref m_interactive).Load(ref m_interactive_data).Load(ref m_interactive_talk).Load(ref m_audio).Load(ref m_h_list).Load(ref m_s_list).Load(ref m_pose).Load(ref m_rotation);
		return loader.Size;
	}
}

// source: N NPC配置表.xls, sheet: Sheet1
public sealed class NPCInfoManager : Table.Manager<NPCInfo>
{
	private static readonly NPCInfoManager ms_instance = new NPCInfoManager();
	
	private NPCInfoManager()
	{
	}
	
	public static NPCInfoManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "npc_info.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, NPCInfo.Version);
	}
	
	public NPCInfo Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewNPCInfo()
	{
		return new NPCInfo();
	}
	public static object NewNPCInfovector3()
	{
		return new NPCInfo.vector3();
	}
	
	public static object NewNPCInfodata()
	{
		return new NPCInfo.data();
	}
	
	public static object NewNPCInfohide()
	{
		return new NPCInfo.hide();
	}
	
	public static object NewNPCInfohideList()
	{
		return new NPCInfo.hideList();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(NPCInfo), NewNPCInfo);
		Table.NewHelper.Register(typeof(NPCInfo.vector3), NewNPCInfovector3);
		Table.NewHelper.Register(typeof(NPCInfo.data), NewNPCInfodata);
		Table.NewHelper.Register(typeof(NPCInfo.hide), NewNPCInfohide);
		Table.NewHelper.Register(typeof(NPCInfo.hideList), NewNPCInfohideList);
	}
	#endregion
}

