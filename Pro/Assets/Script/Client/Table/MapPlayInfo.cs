// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: map_play_info.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class MapPlayInfo : Table.Binary, Table.IKey
{
	#region TypeIdList
	public class TypeIdList : Table.Binary
	{
		List<UInt32> m_list;
		
		public List<UInt32> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region tarTypeLst
	public class tarTypeLst : Table.Binary
	{
		List<UInt16> m_list;
		
		public List<UInt16> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region vector2
	public class vector2 : Table.Binary
	{
		float m_x;
		float m_z;
		
		public float x
		{
			get { return m_x; }
		}
		
		public float z
		{
			get { return m_z; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_x).Load(ref m_z);
			return loader.Size;
		}
	}
	#endregion
	
	#region PosList
	public class PosList : Table.Binary
	{
		List<vector2> m_list;
		
		public List<vector2> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	UInt16     m_playId;
	TypeIdList m_attTypeIdLst;
	tarTypeLst m_attTypeList;
	PosList    m_loopPosLst;
	PosList    m_linearPosLst;
	UInt32     m_stayTime;
	UInt32     m_hangupTime;
	
	public const UInt32 Version = 1331763381;
	
	public UInt64 Key()
	{
		return m_playId;
	}
	
	public UInt16 playId
	{
		get { return m_playId; }
	}
	
	public TypeIdList attTypeIdLst
	{
		get { return m_attTypeIdLst; }
	}
	
	public tarTypeLst attTypeList
	{
		get { return m_attTypeList; }
	}
	
	public PosList loopPosLst
	{
		get { return m_loopPosLst; }
	}
	
	public PosList linearPosLst
	{
		get { return m_linearPosLst; }
	}
	
	public UInt32 stayTime
	{
		get { return m_stayTime; }
	}
	
	public UInt32 hangupTime
	{
		get { return m_hangupTime; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_playId).Load(ref m_attTypeIdLst).Load(ref m_attTypeList).Load(ref m_loopPosLst).Load(ref m_linearPosLst).Load(ref m_stayTime).Load(ref m_hangupTime);
		return loader.Size;
	}
}

// source: D 地图玩法配置表.xls, sheet: Sheet1
public sealed class MapPlayInfoManager : Table.Manager<MapPlayInfo>
{
	private static readonly MapPlayInfoManager ms_instance = new MapPlayInfoManager();
	
	private MapPlayInfoManager()
	{
	}
	
	public static MapPlayInfoManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "map_play_info.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, MapPlayInfo.Version);
	}
	
	public MapPlayInfo Find(UInt16 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewMapPlayInfo()
	{
		return new MapPlayInfo();
	}
	public static object NewMapPlayInfoTypeIdList()
	{
		return new MapPlayInfo.TypeIdList();
	}
	
	public static object NewMapPlayInfotarTypeLst()
	{
		return new MapPlayInfo.tarTypeLst();
	}
	
	public static object NewMapPlayInfovector2()
	{
		return new MapPlayInfo.vector2();
	}
	
	public static object NewMapPlayInfoPosList()
	{
		return new MapPlayInfo.PosList();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(MapPlayInfo), NewMapPlayInfo);
		Table.NewHelper.Register(typeof(MapPlayInfo.TypeIdList), NewMapPlayInfoTypeIdList);
		Table.NewHelper.Register(typeof(MapPlayInfo.tarTypeLst), NewMapPlayInfotarTypeLst);
		Table.NewHelper.Register(typeof(MapPlayInfo.vector2), NewMapPlayInfovector2);
		Table.NewHelper.Register(typeof(MapPlayInfo.PosList), NewMapPlayInfoPosList);
	}
	#endregion
}

