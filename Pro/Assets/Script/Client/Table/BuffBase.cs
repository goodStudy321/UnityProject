// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: buff_base.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class BuffBase : Table.Binary, Table.IKey
{
	#region Effect
	public class Effect : Table.Binary
	{
		List<UInt16> m_list;
		
		public List<UInt16> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region ResistBuff
	public class ResistBuff : Table.Binary
	{
		List<UInt16> m_list;
		
		public List<UInt16> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region IDs
	public class IDs : Table.Binary
	{
		List<UInt32> m_list;
		
		public List<UInt32> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region Val
	public class Val : Table.Binary
	{
		Int32 m_k;
		Int32 m_v;
		
		public Int32 k
		{
			get { return m_k; }
		}
		
		public Int32 v
		{
			get { return m_v; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_k).Load(ref m_v);
			return loader.Size;
		}
	}
	#endregion
	
	#region Items
	public class Items : Table.Binary
	{
		List<Val> m_list;
		
		public List<Val> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	UInt32       m_buff_id;
	UInt32       m_series_id;
	Table.String m_buff_name;
	Table.String m_buff_describe;
	Byte         m_buff_type;
	Byte         m_effect_type;
	Byte         m_exist_type;
	UInt16       m_trigger_precent;
	UInt16       m_header_level;
	UInt16       m_disperse_level;
	float        m_live_time;
	Byte         m_fold_num;
	Byte         m_cancel_type;
	Byte         m_outline;
	UInt16       m_affect_interval;
	Table.String m_icon;
	Table.String m_eft;
	Byte         m_eft_pos;
	Byte         m_eft_forward;
	Items        m_items;
	ResistBuff   m_resist_buff;
	Table.String m_Play_action;
	UInt16       m_Illusion_model;
	Byte         m_Illusion_type;
	UInt16       m_Totem_Target;
	IDs          m_Totem_TarBuf;
	UInt16       m_RadTimes;
	Byte         m_AbsorbType;
	
	public const UInt32 Version = 3745162130;
	
	public UInt64 Key()
	{
		return m_buff_id;
	}
	
	public UInt32 buffId
	{
		get { return m_buff_id; }
	}
	
	public UInt32 seriesId
	{
		get { return m_series_id; }
	}
	
	public string buffName
	{
		get { return m_buff_name; }
	}
	
	public string buffDescribe
	{
		get { return m_buff_describe; }
	}
	
	public Byte buffType
	{
		get { return m_buff_type; }
	}
	
	public Byte effectType
	{
		get { return m_effect_type; }
	}
	
	public Byte existType
	{
		get { return m_exist_type; }
	}
	
	public UInt16 triggerPrecent
	{
		get { return m_trigger_precent; }
	}
	
	public UInt16 headerLevel
	{
		get { return m_header_level; }
	}
	
	public UInt16 disperseLevel
	{
		get { return m_disperse_level; }
	}
	
	public float liveTime
	{
		get { return m_live_time; }
	}
	
	public Byte foldNum
	{
		get { return m_fold_num; }
	}
	
	public Byte cancelType
	{
		get { return m_cancel_type; }
	}
	
	public Byte outline
	{
		get { return m_outline; }
	}
	
	public UInt16 affectInterval
	{
		get { return m_affect_interval; }
	}
	
	public string icon
	{
		get { return m_icon; }
	}
	
	public string eft
	{
		get { return m_eft; }
	}
	
	public Byte eftPos
	{
		get { return m_eft_pos; }
	}
	
	public Byte eftForward
	{
		get { return m_eft_forward; }
	}
	
	public Items items
	{
		get { return m_items; }
	}
	
	public ResistBuff resistBuff
	{
		get { return m_resist_buff; }
	}
	
	public string playAction
	{
		get { return m_Play_action; }
	}
	
	public UInt16 illusionModel
	{
		get { return m_Illusion_model; }
	}
	
	public Byte illusionType
	{
		get { return m_Illusion_type; }
	}
	
	public UInt16 totemTarget
	{
		get { return m_Totem_Target; }
	}
	
	public IDs totemTarBuf
	{
		get { return m_Totem_TarBuf; }
	}
	
	public UInt16 radTimes
	{
		get { return m_RadTimes; }
	}
	
	public Byte absorbType
	{
		get { return m_AbsorbType; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_buff_id).Load(ref m_series_id).Load(ref m_buff_name).Load(ref m_buff_describe).Load(ref m_buff_type).Load(ref m_effect_type).Load(ref m_exist_type).Load(ref m_trigger_precent).Load(ref m_header_level).Load(ref m_disperse_level).Load(ref m_live_time).Load(ref m_fold_num).Load(ref m_cancel_type).Load(ref m_outline).Load(ref m_affect_interval).Load(ref m_icon).Load(ref m_eft).Load(ref m_eft_pos).Load(ref m_eft_forward).Load(ref m_items).Load(ref m_resist_buff).Load(ref m_Play_action).Load(ref m_Illusion_model).Load(ref m_Illusion_type).Load(ref m_Totem_Target).Load(ref m_Totem_TarBuf).Load(ref m_RadTimes).Load(ref m_AbsorbType);
		return loader.Size;
	}
}

// source: B Buff配置表.xls, sheet: Sheet1
public sealed class BuffBaseManager : Table.Manager<BuffBase>
{
	private static readonly BuffBaseManager ms_instance = new BuffBaseManager();
	
	private BuffBaseManager()
	{
	}
	
	public static BuffBaseManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "buff_base.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, BuffBase.Version);
	}
	
	public BuffBase Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewBuffBase()
	{
		return new BuffBase();
	}
	public static object NewBuffBaseEffect()
	{
		return new BuffBase.Effect();
	}
	
	public static object NewBuffBaseResistBuff()
	{
		return new BuffBase.ResistBuff();
	}
	
	public static object NewBuffBaseIDs()
	{
		return new BuffBase.IDs();
	}
	
	public static object NewBuffBaseVal()
	{
		return new BuffBase.Val();
	}
	
	public static object NewBuffBaseItems()
	{
		return new BuffBase.Items();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(BuffBase), NewBuffBase);
		Table.NewHelper.Register(typeof(BuffBase.Effect), NewBuffBaseEffect);
		Table.NewHelper.Register(typeof(BuffBase.ResistBuff), NewBuffBaseResistBuff);
		Table.NewHelper.Register(typeof(BuffBase.IDs), NewBuffBaseIDs);
		Table.NewHelper.Register(typeof(BuffBase.Val), NewBuffBaseVal);
		Table.NewHelper.Register(typeof(BuffBase.Items), NewBuffBaseItems);
	}
	#endregion
}

