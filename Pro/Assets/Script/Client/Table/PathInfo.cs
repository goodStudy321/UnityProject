// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: PathInfo.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class PathInfo : Table.Binary, Table.IKey
{
	#region Vector3
	public class Vector3 : Table.Binary
	{
		Int32 m_x;
		Int32 m_y;
		Int32 m_z;
		
		public Int32 x
		{
			get { return m_x; }
		}
		
		public Int32 y
		{
			get { return m_y; }
		}
		
		public Int32 z
		{
			get { return m_z; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_x).Load(ref m_y).Load(ref m_z);
			return loader.Size;
		}
	}
	#endregion
	
	#region PointInfo
	public class PointInfo : Table.Binary
	{
		Vector3 m_point;
		double  m_duration;
		double  m_delay;
		
		public Vector3 point
		{
			get { return m_point; }
		}
		
		public double duration
		{
			get { return m_duration; }
		}
		
		public double delay
		{
			get { return m_delay; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_point).Load(ref m_duration).Load(ref m_delay);
			return loader.Size;
		}
	}
	#endregion
	
	#region Points
	public class Points : Table.Binary
	{
		List<PointInfo> m_list;
		
		public List<PointInfo> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	UInt16 m_id;
	Points m_points;
	Byte   m_DefaultSpeed;
	
	public const UInt32 Version = 2618868168;
	
	public UInt64 Key()
	{
		return m_id;
	}
	
	public UInt16 id
	{
		get { return m_id; }
	}
	
	public Points points
	{
		get { return m_points; }
	}
	
	public Byte defaultSpeed
	{
		get { return m_DefaultSpeed; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_id).Load(ref m_points).Load(ref m_DefaultSpeed);
		return loader.Size;
	}
}

// source: L 路径点.xls, sheet: Sheet1
public sealed class PathInfoManager : Table.Manager<PathInfo>
{
	private static readonly PathInfoManager ms_instance = new PathInfoManager();
	
	private PathInfoManager()
	{
	}
	
	public static PathInfoManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "pathinfo.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, PathInfo.Version);
	}
	
	public PathInfo Find(UInt16 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewPathInfo()
	{
		return new PathInfo();
	}
	public static object NewPathInfoVector3()
	{
		return new PathInfo.Vector3();
	}
	
	public static object NewPathInfoPointInfo()
	{
		return new PathInfo.PointInfo();
	}
	
	public static object NewPathInfoPoints()
	{
		return new PathInfo.Points();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(PathInfo), NewPathInfo);
		Table.NewHelper.Register(typeof(PathInfo.Vector3), NewPathInfoVector3);
		Table.NewHelper.Register(typeof(PathInfo.PointInfo), NewPathInfoPointInfo);
		Table.NewHelper.Register(typeof(PathInfo.Points), NewPathInfoPoints);
	}
	#endregion
}

