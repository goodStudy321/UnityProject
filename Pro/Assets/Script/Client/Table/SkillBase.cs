// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: skill_base.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class SkillBase : Table.Binary, Table.IKey
{
	UInt32       m_baseid;
	Table.String m_name;
	Table.String m_name_suffix;
	UInt16       m_lv_max;
	Table.String m_pathicon;
	
	public const UInt32 Version = 3108388122;
	
	public UInt64 Key()
	{
		return m_baseid;
	}
	
	public UInt32 baseid
	{
		get { return m_baseid; }
	}
	
	public string name
	{
		get { return m_name; }
	}
	
	public string nameSuffix
	{
		get { return m_name_suffix; }
	}
	
	public UInt16 lvMax
	{
		get { return m_lv_max; }
	}
	
	public string pathicon
	{
		get { return m_pathicon; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_baseid).Load(ref m_name).Load(ref m_name_suffix).Load(ref m_lv_max).Load(ref m_pathicon);
		return loader.Size;
	}
}

// source: J 技能等级配置表.xls, sheet: Sheet2
public sealed class SkillBaseManager : Table.Manager<SkillBase>
{
	private static readonly SkillBaseManager ms_instance = new SkillBaseManager();
	
	private SkillBaseManager()
	{
	}
	
	public static SkillBaseManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "skill_base.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, SkillBase.Version);
	}
	
	public SkillBase Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewSkillBase()
	{
		return new SkillBase();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(SkillBase), NewSkillBase);
	}
	#endregion
}

