// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: id_res.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class IdRes : Table.Binary, Table.IKey
{
	#region resPFList
	public class resPFList : Table.Binary
	{
		List<Table.String> m_list;
		
		public List<Table.String> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	UInt32       m_id;
	Table.String m_res_name;
	Byte         m_trigger_ent;
	Table.String m_ent_str;
	Byte         m_type;
	Byte         m_type_index;
	resPFList    m_respf_list;
	
	public const UInt32 Version = 2608932030;
	
	public UInt64 Key()
	{
		return m_id;
	}
	
	public UInt32 id
	{
		get { return m_id; }
	}
	
	public string resName
	{
		get { return m_res_name; }
	}
	
	public Byte triggerEnt
	{
		get { return m_trigger_ent; }
	}
	
	public string entStr
	{
		get { return m_ent_str; }
	}
	
	public Byte type
	{
		get { return m_type; }
	}
	
	public Byte typeIndex
	{
		get { return m_type_index; }
	}
	
	public resPFList respfList
	{
		get { return m_respf_list; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_id).Load(ref m_res_name).Load(ref m_trigger_ent).Load(ref m_ent_str).Load(ref m_type).Load(ref m_type_index).Load(ref m_respf_list);
		return loader.Size;
	}
}

// source: I ID资源事件配置表.xls, sheet: Sheet1
public sealed class IdResManager : Table.Manager<IdRes>
{
	private static readonly IdResManager ms_instance = new IdResManager();
	
	private IdResManager()
	{
	}
	
	public static IdResManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "id_res.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, IdRes.Version);
	}
	
	public IdRes Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewIdRes()
	{
		return new IdRes();
	}
	public static object NewIdResresPFList()
	{
		return new IdRes.resPFList();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(IdRes), NewIdRes);
		Table.NewHelper.Register(typeof(IdRes.resPFList), NewIdResresPFList);
	}
	#endregion
}

