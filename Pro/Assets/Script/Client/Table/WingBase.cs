// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: wing_base.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class WingBase : Table.Binary, Table.IKey
{
	UInt32       m_id;
	Table.String m_name;
	Byte         m_mount_point;
	UInt32       m_model_m;
	UInt32       m_model_f;
	UInt32       m_ui_model_m;
	UInt32       m_ui_model_f;
	Table.String m_icon;
	
	public const UInt32 Version = 1728805840;
	
	public UInt64 Key()
	{
		return m_id;
	}
	
	public UInt32 id
	{
		get { return m_id; }
	}
	
	public string name
	{
		get { return m_name; }
	}
	
	public Byte mountPoint
	{
		get { return m_mount_point; }
	}
	
	public UInt32 modelM
	{
		get { return m_model_m; }
	}
	
	public UInt32 modelF
	{
		get { return m_model_f; }
	}
	
	public UInt32 uiModelM
	{
		get { return m_ui_model_m; }
	}
	
	public UInt32 uiModelF
	{
		get { return m_ui_model_f; }
	}
	
	public string icon
	{
		get { return m_icon; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_id).Load(ref m_name).Load(ref m_mount_point).Load(ref m_model_m).Load(ref m_model_f).Load(ref m_ui_model_m).Load(ref m_ui_model_f).Load(ref m_icon);
		return loader.Size;
	}
}

// source: C 翅膀基础表.xls, sheet: Sheet1
public sealed class WingBaseManager : Table.Manager<WingBase>
{
	private static readonly WingBaseManager ms_instance = new WingBaseManager();
	
	private WingBaseManager()
	{
	}
	
	public static WingBaseManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "wing_base.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, WingBase.Version);
	}
	
	public WingBase Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewWingBase()
	{
		return new WingBase();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(WingBase), NewWingBase);
	}
	#endregion
}

