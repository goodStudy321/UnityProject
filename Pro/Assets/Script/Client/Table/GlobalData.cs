// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: GlobalData.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class GlobalData : Table.Binary, Table.IKey
{
	#region values
	public class values : Table.Binary
	{
		List<UInt32> m_list;
		
		public List<UInt32> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	Byte         m_id;
	Table.String m_name;
	Table.String m_num1;
	values       m_num2;
	Table.String m_num3;
	Table.String m_describe;
	
	public const UInt32 Version = 920377639;
	
	public UInt64 Key()
	{
		return m_id;
	}
	
	public Byte id
	{
		get { return m_id; }
	}
	
	public string name
	{
		get { return m_name; }
	}
	
	public string num1
	{
		get { return m_num1; }
	}
	
	public values num2
	{
		get { return m_num2; }
	}
	
	public string num3
	{
		get { return m_num3; }
	}
	
	public string describe
	{
		get { return m_describe; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_id).Load(ref m_name).Load(ref m_num1).Load(ref m_num2).Load(ref m_num3).Load(ref m_describe);
		return loader.Size;
	}
}

// source: G Global数据.xls, sheet: Sheet1
public sealed class GlobalDataManager : Table.Manager<GlobalData>
{
	private static readonly GlobalDataManager ms_instance = new GlobalDataManager();
	
	private GlobalDataManager()
	{
	}
	
	public static GlobalDataManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "globaldata.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, GlobalData.Version);
	}
	
	public GlobalData Find(Byte key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewGlobalData()
	{
		return new GlobalData();
	}
	public static object NewGlobalDatavalues()
	{
		return new GlobalData.values();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(GlobalData), NewGlobalData);
		Table.NewHelper.Register(typeof(GlobalData.values), NewGlobalDatavalues);
	}
	#endregion
}

