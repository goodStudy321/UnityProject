// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: PetDetailInfo.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class PetDetailInfo : Table.Binary, Table.IKey
{
	#region array
	public class array : Table.Binary
	{
		List<UInt32> m_list;
		
		public List<UInt32> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region tlist
	public class tlist : Table.Binary
	{
		List<UInt32> m_list;
		
		public List<UInt32> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	UInt32       m_id;
	Byte         m_type;
	Byte         m_step;
	Table.String m_name;
	array        m_condition;
	UInt32       m_cost_essence_soul;
	UInt32       m_att;
	UInt32       m_arm;
	UInt32       m_hp;
	UInt32       m_def;
	tlist        m_skills;
	tlist        m_open_list;
	
	public const UInt32 Version = 1548006517;
	
	public UInt64 Key()
	{
		return m_id;
	}
	
	public UInt32 id
	{
		get { return m_id; }
	}
	
	public Byte type
	{
		get { return m_type; }
	}
	
	public Byte step
	{
		get { return m_step; }
	}
	
	public string name
	{
		get { return m_name; }
	}
	
	public array condition
	{
		get { return m_condition; }
	}
	
	public UInt32 costEssenceSoul
	{
		get { return m_cost_essence_soul; }
	}
	
	public UInt32 att
	{
		get { return m_att; }
	}
	
	public UInt32 arm
	{
		get { return m_arm; }
	}
	
	public UInt32 hp
	{
		get { return m_hp; }
	}
	
	public UInt32 def
	{
		get { return m_def; }
	}
	
	public tlist skills
	{
		get { return m_skills; }
	}
	
	public tlist openList
	{
		get { return m_open_list; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_id).Load(ref m_type).Load(ref m_step).Load(ref m_name).Load(ref m_condition).Load(ref m_cost_essence_soul).Load(ref m_att).Load(ref m_arm).Load(ref m_hp).Load(ref m_def).Load(ref m_skills).Load(ref m_open_list);
		return loader.Size;
	}
}

// source: C 宠物配置表.xls, sheet: Sheet1
public sealed class PetDetailInfoManager : Table.Manager<PetDetailInfo>
{
	private static readonly PetDetailInfoManager ms_instance = new PetDetailInfoManager();
	
	private PetDetailInfoManager()
	{
	}
	
	public static PetDetailInfoManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "petdetailinfo.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, PetDetailInfo.Version);
	}
	
	public PetDetailInfo Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewPetDetailInfo()
	{
		return new PetDetailInfo();
	}
	public static object NewPetDetailInfoarray()
	{
		return new PetDetailInfo.array();
	}
	
	public static object NewPetDetailInfotlist()
	{
		return new PetDetailInfo.tlist();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(PetDetailInfo), NewPetDetailInfo);
		Table.NewHelper.Register(typeof(PetDetailInfo.array), NewPetDetailInfoarray);
		Table.NewHelper.Register(typeof(PetDetailInfo.tlist), NewPetDetailInfotlist);
	}
	#endregion
}

