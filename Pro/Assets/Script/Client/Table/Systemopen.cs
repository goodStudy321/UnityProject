// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: systemopen.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class systemopen : Table.Binary, Table.IKey
{
	#region paramList
	public class paramList : Table.Binary
	{
		List<UInt32> m_list;
		
		public List<UInt32> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	UInt16       m_systemid;
	UInt16       m_triggermethod;
	UInt16       m_triggerparm;
	Table.String m_buttonname;
	Table.String m_sysdescribe;
	paramList    m_itemid;
	UInt16       m_modelid;
	Byte         m_open_type;
	Byte         m_open_anime;
	UInt16       m_open_anime_time;
	
	public const UInt32 Version = 2539895941;
	
	public UInt64 Key()
	{
		return m_systemid;
	}
	
	public UInt16 systemid
	{
		get { return m_systemid; }
	}
	
	public UInt16 triggermethod
	{
		get { return m_triggermethod; }
	}
	
	public UInt16 triggerparm
	{
		get { return m_triggerparm; }
	}
	
	public string buttonname
	{
		get { return m_buttonname; }
	}
	
	public string sysdescribe
	{
		get { return m_sysdescribe; }
	}
	
	public paramList itemid
	{
		get { return m_itemid; }
	}
	
	public UInt16 modelid
	{
		get { return m_modelid; }
	}
	
	public Byte openType
	{
		get { return m_open_type; }
	}
	
	public Byte openAnime
	{
		get { return m_open_anime; }
	}
	
	public UInt16 openAnimeTime
	{
		get { return m_open_anime_time; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_systemid).Load(ref m_triggermethod).Load(ref m_triggerparm).Load(ref m_buttonname).Load(ref m_sysdescribe).Load(ref m_itemid).Load(ref m_modelid).Load(ref m_open_type).Load(ref m_open_anime).Load(ref m_open_anime_time);
		return loader.Size;
	}
}

// source: X 系统开放表.xls, sheet: Sheet1
public sealed class systemopenManager : Table.Manager<systemopen>
{
	private static readonly systemopenManager ms_instance = new systemopenManager();
	
	private systemopenManager()
	{
	}
	
	public static systemopenManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "systemopen.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, systemopen.Version);
	}
	
	public systemopen Find(UInt16 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object Newsystemopen()
	{
		return new systemopen();
	}
	public static object NewsystemopenparamList()
	{
		return new systemopen.paramList();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(systemopen), Newsystemopen);
		Table.NewHelper.Register(typeof(systemopen.paramList), NewsystemopenparamList);
	}
	#endregion
}

