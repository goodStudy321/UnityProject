// Generated by the Table Description Language compiler.  DO NOT EDIT!
// source: SynthetizeInfo.prot

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;


public class SynthetizeInfo : Table.Binary, Table.IKey
{
	#region needItem
	public class needItem : Table.Binary
	{
		UInt32 m_item_id;
		UInt32 m_item_num;
		
		public UInt32 itemId
		{
			get { return m_item_id; }
		}
		
		public UInt32 itemNum
		{
			get { return m_item_num; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_item_id).Load(ref m_item_num);
			return loader.Size;
		}
	}
	#endregion
	
	#region needItems
	public class needItems : Table.Binary
	{
		List<needItem> m_list;
		
		public List<needItem> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	#region newItem
	public class newItem : Table.Binary
	{
		UInt32 m_item_id;
		Byte   m_item_type;
		UInt16 m_weight;
		
		public UInt32 itemId
		{
			get { return m_item_id; }
		}
		
		public Byte itemType
		{
			get { return m_item_type; }
		}
		
		public UInt16 weight
		{
			get { return m_weight; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_item_id).Load(ref m_item_type).Load(ref m_weight);
			return loader.Size;
		}
	}
	#endregion
	
	#region newItems
	public class newItems : Table.Binary
	{
		List<newItem> m_list;
		
		public List<newItem> list
		{
			get { return m_list; }
		}
		
		public override int Load(byte[] buffer, int index)
		{
			Table.Loader loader = new Table.Loader(ref buffer, index);
			loader.Load(ref m_list);
			return loader.Size;
		}
	}
	#endregion
	
	UInt32       m_id;
	Byte         m_type;
	Table.String m_info;
	needItems    m_item_list;
	newItems     m_new_item_list;
	UInt16       m_base_succ;
	UInt32       m_sp_item_id;
	UInt16       m_add_secc;
	
	public const UInt32 Version = 4046879601;
	
	public UInt64 Key()
	{
		return m_id;
	}
	
	public UInt32 id
	{
		get { return m_id; }
	}
	
	public Byte type
	{
		get { return m_type; }
	}
	
	public string info
	{
		get { return m_info; }
	}
	
	public needItems itemList
	{
		get { return m_item_list; }
	}
	
	public newItems newItemList
	{
		get { return m_new_item_list; }
	}
	
	public UInt16 baseSucc
	{
		get { return m_base_succ; }
	}
	
	public UInt32 spItemId
	{
		get { return m_sp_item_id; }
	}
	
	public UInt16 addSecc
	{
		get { return m_add_secc; }
	}
	
	public override int Load(byte[] buffer, int index)
	{
		Table.Loader loader = new Table.Loader(ref buffer, index);
		loader.Load(ref m_id).Load(ref m_type).Load(ref m_info).Load(ref m_item_list).Load(ref m_new_item_list).Load(ref m_base_succ).Load(ref m_sp_item_id).Load(ref m_add_secc);
		return loader.Size;
	}
}

// source: H 合成表.xls, sheet: Sheet1
public sealed class SynthetizeInfoManager : Table.Manager<SynthetizeInfo>
{
	private static readonly SynthetizeInfoManager ms_instance = new SynthetizeInfoManager();
	
	private SynthetizeInfoManager()
	{
	}
	
	public static SynthetizeInfoManager instance
	{
		get { return ms_instance; }
	}
	
	public string source
	{
		get { return "synthetizeinfo.tbl"; }
	}
	
	public bool Load(string path)
	{
		Register();
		return Load(path, source, SynthetizeInfo.Version);
	}
	
	public SynthetizeInfo Find(UInt32 key)
	{
		return FindInternal(key);
	}
	
	#region new helper
	public static object NewSynthetizeInfo()
	{
		return new SynthetizeInfo();
	}
	public static object NewSynthetizeInfoneedItem()
	{
		return new SynthetizeInfo.needItem();
	}
	
	public static object NewSynthetizeInfoneedItems()
	{
		return new SynthetizeInfo.needItems();
	}
	
	public static object NewSynthetizeInfonewItem()
	{
		return new SynthetizeInfo.newItem();
	}
	
	public static object NewSynthetizeInfonewItems()
	{
		return new SynthetizeInfo.newItems();
	}
	
	private static void Register()
	{
		Table.NewHelper.Clear();
		Table.NewHelper.Register(typeof(SynthetizeInfo), NewSynthetizeInfo);
		Table.NewHelper.Register(typeof(SynthetizeInfo.needItem), NewSynthetizeInfoneedItem);
		Table.NewHelper.Register(typeof(SynthetizeInfo.needItems), NewSynthetizeInfoneedItems);
		Table.NewHelper.Register(typeof(SynthetizeInfo.newItem), NewSynthetizeInfonewItem);
		Table.NewHelper.Register(typeof(SynthetizeInfo.newItems), NewSynthetizeInfonewItems);
	}
	#endregion
}

